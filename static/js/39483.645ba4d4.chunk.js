"use strict";(self.webpackChunksc_envimonitor=self.webpackChunksc_envimonitor||[]).push([[39483],{39483:(e,r,n)=>{n.r(r),n.d(r,{getGeometryServiceURL:()=>c,projectGeometry:()=>g});var t=n(86560),i=n(50076),o=n(65308),l=n(71334),a=n(70414);async function c(){var e;let r,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,l=arguments.length>1?arguments[1]:void 0;if(t.A.geometryServiceUrl)return t.A.geometryServiceUrl;if(!n)throw new i.A("internal:geometry-service-url-not-configured","No geometryServiceUrl in configuration");r="portal"in n?n.portal||o.A.getDefault():n,await r.load({signal:l});const a=null===(e=r.helperServices)||void 0===e||null===(e=e.geometry)||void 0===e?void 0:e.url;if(!a)throw new i.A("internal:geometry-service-url-not-configured","No geometryServiceUrl in configuration");return a}async function g(e,r){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,t=arguments.length>3?arguments[3]:void 0;const o=await c(n,t),g=new a.A({geometries:[e],outSpatialReference:r}),u=await(0,l.C)(o,g,{signal:t});if(u&&Array.isArray(u)&&1===u.length)return u[0];throw new i.A("internal:geometry-service-projection-failed","Geometry projection failed on service")}}}]);
//# sourceMappingURL=39483.645ba4d4.chunk.js.map