{"version":3,"file":"static/js/36201.30fdda04.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/core/views/2d/engine/webgl/PooledUint32Array.js","../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/Buffer.js","../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/MappedMesh.js","../node_modules/@arcgis/core/views/webgl/ProgramTemplate.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/resolver.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/shaderRepository.js","../node_modules/@arcgis/core/views/2d/engine/webgl/Mesh2D.js","../node_modules/@arcgis/core/views/2d/engine/webgl/ClippingInfo.js","../node_modules/@arcgis/core/views/2d/engine/webgl/WGLContainer.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushTileDebugInfo.js","../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/FreeList.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/BackgroundPrograms.js","../node_modules/@arcgis/core/views/2d/engine/webgl/FeatureDisplayList.js","../node_modules/@arcgis/core/views/2d/engine/webgl/ReshufflePlan.js","../node_modules/@arcgis/core/views/2d/engine/webgl/util/Reader.js","../node_modules/@arcgis/core/views/2d/engine/webgl/mesh/meshDebugUtils.js","../node_modules/@arcgis/core/views/2d/engine/webgl/FeatureTile.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/TileInfoPrograms.js","../node_modules/@arcgis/core/views/2d/engine/webgl/AFeatureTile.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushClip.js","../node_modules/@arcgis/core/views/2d/engine/brushes.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushStencil.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import{assertIsSome as t}from\"../../../../core/maybe.js\";import{FreeList as e}from\"./cpuMapped/FreeList.js\";const r=has(\"esri-2d-log-allocations\");class s{static create(t,e){const r=e.acquireUint32Array(t);return new s(r,e)}constructor(t,e){this._array=t,this._pool=e}get array(){return this._array}get length(){return this._array.length}getUint32View(t,e){return new Uint32Array(this._array.buffer,t+this._array.byteOffset,e)}expand(t){if(t<=this._array.byteLength)return;const e=this._pool.acquireUint32Array(t);e.set(this._array),this._pool.releaseUint32Array(this._array),this._array=e}destroy(){this._pool.releaseUint32Array(this._array)}}class a{constructor(){this._data=new ArrayBuffer(a.BYTE_LENGTH),this._freeList=new e({start:0,end:this._data.byteLength})}static get BYTE_LENGTH(){return 16e6}get buffer(){return this._data}acquireUint32Array(t){const e=this._freeList.firstFit(t);return null==e?null:new Uint32Array(this._data,e,t/Uint32Array.BYTES_PER_ELEMENT)}releaseUint32Array(t){this._freeList.free(t.byteOffset,t.byteLength)}}class i{constructor(){this._pages=[],this._pagesByBuffer=new Map,this._bytesAllocated=0}destroy(){this._pages=[],this._pagesByBuffer=null}get _bytesTotal(){return this._pages.length*a.BYTE_LENGTH}acquireUint32Array(e){if(this._bytesAllocated+=e,r&&console.log(`Allocating ${e}, (${this._bytesAllocated} / ${this._bytesTotal})`),e>=a.BYTE_LENGTH)return new Uint32Array(e/Uint32Array.BYTES_PER_ELEMENT);for(const t of this._pages){const r=t.acquireUint32Array(e);if(null!=r)return r}const s=this._addPage().acquireUint32Array(e);return t(s,\"Expected to allocate page\"),s}releaseUint32Array(t){this._bytesAllocated-=t.byteLength,r&&console.log(`Freeing ${t.byteLength}, (${this._bytesAllocated} / ${this._bytesTotal})`);const e=this._pagesByBuffer.get(t.buffer);e&&e.releaseUint32Array(t)}_addPage(){const t=new a;return this._pages.push(t),this._pagesByBuffer.set(t.buffer,t),t}}export{i as ArrayBufferPool,s as PooledUint32Array};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport\"../../../../../core/has.js\";import{assertIsSome as t}from\"../../../../../core/maybe.js\";import{toUint32 as i,toFloat32 as r}from\"../number.js\";import{PooledUint32Array as e}from\"../PooledUint32Array.js\";import{FreeList as s}from\"./FreeList.js\";import{BufferObject as n}from\"../../../../webgl/BufferObject.js\";import{Usage as h}from\"../../../../webgl/enums.js\";const a=1.25,d=32767,u=d<<16|d;class o{constructor(t,i,r,s){this._pool=s;const n=e.create(i*r*Uint32Array.BYTES_PER_ELEMENT,this._pool);this.size=i,this.strideInt=r,this.bufferType=t,this.dirty={start:1/0,end:0},this.memoryStats={bytesUsed:0,bytesReserved:i*r*Uint32Array.BYTES_PER_ELEMENT},this._gpu=null,this._cpu=n,this.clear()}get elementSize(){return this._cpu.length/this.strideInt}get intSize(){return this.fillPointer*this.strideInt}get byteSize(){return this.intSize*Uint32Array.BYTES_PER_ELEMENT}get invalidated(){return this.bufferSize>0&&!this._gpu}get invalidatedComputeBuffer(){return this.bufferSize>0&&!this._gpuComputeTriangles}invalidate(){this._invalidateTriangleBuffer(),this._gpu?.dispose(),this._gpu=null}_invalidateTriangleBuffer(){this._gpuComputeTriangles?.dispose(),this._gpuComputeTriangles=null}destroy(){this._gpu?.dispose(),this._gpuComputeTriangles?.dispose(),this._cpu?.destroy()}clear(){this.dirty.start=1/0,this.dirty.end=0,this.freeList=new s({start:0,end:this._cpu.length/this.strideInt}),this.fillPointer=0}ensure(t){if(this.maxAvailableSpace()>=t)return;if(t*this.strideInt>this._cpu.length-this.fillPointer){this.invalidate();const i=this._cpu.length/this.strideInt,r=Math.round((i+t)*a),e=r*this.strideInt;this._cpu.expand(e*Uint32Array.BYTES_PER_ELEMENT),this.freeList.free(i,r-i),this.memoryStats.bytesReserved+=(r-i)*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}}setU32(t,i){this._cpu.array[t]!==i&&(this._cpu.array[t]=i,this.dirty.start=Math.min(t,this.dirty.start),this.dirty.end=Math.max(t+1,this.dirty.end))}setF32(t,r){this.setU32(t,i(r))}setF32Range(t,r,e){const s=i(e);this._cpu.array.fill(s,t,r),this.dirty.start=Math.min(t,this.dirty.start),this.dirty.end=Math.max(r,this.dirty.end)}getF32(t){return r(this._cpu.array[t])}getGPUBuffer(t,i=!1){if(!this.bufferSize)return null;if(i){if(\"index\"!==this.bufferType)throw new Error(\"Tired to get triangle buffer, but target is not an index buffer\");return null==this._gpuComputeTriangles&&(this._gpuComputeTriangles=this._createComputeBuffer(t)),this._gpuComputeTriangles}return null==this._gpu&&(this._gpu=this._createBuffer(t)),this._gpu}getView(t,i){return this._cpu.getUint32View(t,i/Uint32Array.BYTES_PER_ELEMENT)}get bufferSize(){return this._cpu.length/this.strideInt}maxAvailableSpace(){return this.freeList.maxAvailableSpace()}insert(i,r,e,s){const n=e*this.strideInt;if(!n)return 0;const h=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,a=new Uint32Array(i,h,n),d=this.freeList.firstFit(e);t(d,\"First fit region must be defined\");const u=d*this.strideInt,o=n;if(this._cpu.array.set(a,u),0!==s)for(let t=0;t<a.length;t++)this._cpu.array[t+u]+=s;return this.dirty.start=Math.min(this.dirty.start,u),this.dirty.end=Math.max(this.dirty.end,u+o),this.fillPointer=Math.max(this.fillPointer,u+o),this.memoryStats.bytesUsed+=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d}copyFrom(i,r,e,s,n){const h=e*this.strideInt;if(!h)return 0;const a=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d=i._cpu.getUint32View(a,h),u=this.freeList.firstFit(e);t(u,\"First fit region must be defined\");const o=u*this.strideInt,f=h;if(this._cpu.array.set(d,o),0!==s)for(let t=0;t<h;t++)this._cpu.array[o+t*this.strideInt+n]+=s;return this.dirty.start=Math.min(this.dirty.start,o),this.dirty.end=Math.max(this.dirty.end,o+f),this.fillPointer=Math.max(this.fillPointer,o+f),this.memoryStats.bytesUsed+=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,u}free(t,i,r){const e=t*this.strideInt,s=(t+i)*this.strideInt;if(!0===r)for(let n=t;n!==t+i;n++)this._cpu.array[n*this.strideInt]=u;this.dirty.start=Math.min(this.dirty.start,e),this.dirty.end=Math.max(this.dirty.end,s),this.freeList.free(t,i),this.memoryStats.bytesUsed-=i*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}upload(){if(this.dirty.end){if(this._invalidateTriangleBuffer(),null==this._gpu)return this.dirty.start=1/0,void(this.dirty.end=0);this._gpu.setSubData(this._cpu.array,this.dirty.start,this.dirty.start,this.dirty.end),this.dirty.start=1/0,this.dirty.end=0}}reshuffle(t,i){if(0===i.length)return;const r=this.byteSize,s=t*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,n=r>s,h=this._cpu,a=e.create(s,this._pool);n||a.array.set(this._cpu.getUint32View(0,this.intSize));for(const e of i)if(n||e.srcFrom!==e.dstFrom||0!==e.mutate){this.dirty.start=Math.min(this.dirty.start,e.dstFrom*this.strideInt),this.dirty.end=Math.max(this.dirty.end,(e.dstFrom+e.count)*this.strideInt);for(let t=0;t<e.count;t++){const i=(e.dstFrom+t)*this.strideInt,r=(e.srcFrom+t)*this.strideInt;for(let t=0;t<this.strideInt;t++)a.array[i+t]=h.array[r+t]+e.mutate}}this._cpu.destroy(),this._cpu=a,n&&this.invalidate(),this.freeList.clear(),this.memoryStats.bytesUsed=this.memoryStats.bytesReserved=s}_createBuffer(t){const i=h.DYNAMIC_DRAW;return\"index\"===this.bufferType?n.createIndex(t,i,this._cpu.array):n.createVertex(t,i,this._cpu.array)}_createComputeBuffer(t){const i=h.DYNAMIC_DRAW,r=new Uint32Array(this.fillPointer/3);for(let e=0;e<this.fillPointer;e+=3)r[e/3]=this._cpu.array[e];return n.createIndex(t,i,r)}}export{o as MappedBuffer};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport\"../../../../../core/has.js\";import{destroyMaybe as e}from\"../../../../../core/maybe.js\";import{i1616to32 as t}from\"../number.js\";import{MappedBuffer as i}from\"./Buffer.js\";import{unpackDataView as r}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import{vertexLayoutHash as s}from\"../shaderGraph/techniques/mesh/utils.js\";import{PrimitiveType as f,DataType as o}from\"../../../../webgl/enums.js\";import{VertexArrayObject as n}from\"../../../../webgl/VertexArrayObject.js\";const u=1e3,a=4,h=[{name:\"visibility\",offset:0,type:o.FLOAT,count:1}],l={hash:s(h),attributes:h,stride:a};function _(e,t){const i=e.attributes.filter((e=>t.locations.has(e.name))).map((t=>({name:t.name,type:t.type,count:t.count,divisor:0,normalized:t.normalized??!1,offset:t.offset,stride:e.stride})));return new Map([[\"geometry\",i]])}function d(e,t){const i=[],r=e.attributes.filter((e=>t.locations.has(e.name)));for(const s of r){i.push({name:s.name,type:s.type,count:s.count,divisor:0,normalized:s.normalized??!1,offset:s.offset,stride:e.stride});const r=t.computeAttributeMap[s.name];null!=r&&2===r.length&&(i.push({name:r[0],count:s.count,divisor:0,type:s.type,normalized:s.normalized??!1,offset:s.offset+e.stride,stride:e.stride}),i.push({name:r[1],count:s.count,divisor:0,type:s.type,normalized:s.normalized??!1,offset:s.offset+2*e.stride,stride:e.stride}))}return new Map([[\"geometry\",i]])}class y{constructor(e,t,i){if(this._bufferPool=e,this._layout=t,this.useVisibility=i,this._invalidatedGeometry=!1,this._invalidatedCompute=!1,this._position=this._layout.attributes.find((e=>\"pos\"===e.name||\"position\"===e.name)),!this._position)throw new Error(\"InternalError: Unable to find position attribute\")}destroy(){this._indexBuffer=e(this._indexBuffer),this._vertexBuffer=e(this._vertexBuffer),this._visibilityBuffer=e(this._visibilityBuffer),this._computeVAO?.disposeVAOOnly(),this._geometryVAO?.disposeVAOOnly()}get layout(){return this._layout}getDrawArgs(e,t,i,r){return r?{primitive:f.POINTS,count:t/3,offset:i/3}:{primitive:e,count:t,offset:i}}getAttributePrecisionPackFactors(){const e={};for(const t of this.layout.attributes)t.packPrecisionFactor&&(e[t.name]=t.packPrecisionFactor);return e}getDebugVertexInfo(e=!1,t){if(!this._vertexBuffer)return null;const i=this._layout,s=i.stride,f=this._vertexBuffer.getView(0,this._vertexBuffer.byteSize),o=[];if(e)if(null==t)console.log(\"must provide location info to see compute attributes\");else for(const r of i.attributes){const e=t.computeAttributeMap[r.name];null!=e&&2===e.length&&(o.push({...r,name:e[0],offset:r.offset+s}),o.push({...r,name:e[1],offset:r.offset+2*s}))}const n=new DataView(f.slice().buffer);let u=f.byteLength/s;e&&(u=this._indexBuffer.fillPointer/3);const a=this._indexBuffer.getView(0,this._indexBuffer.byteSize);let h=0;const l=[];for(let _=0;_<u;_++){if(e){h=a[3*_]*s}const t={};for(const e of[...i.attributes,...o]){let i=`${e.offset} ${e.name}`,s=r(n,e,h);if(e.packPrecisionFactor)if(i+=` (precision: ${e.packPrecisionFactor})`,\"number\"==typeof s)s/=e.packPrecisionFactor;else for(let t=0;t<s.length;t++)s[t]/=e.packPrecisionFactor;t[i]=s}h+=s,l.push(t)}return{vertices:l,layout:i}}_ensure(e,t){if(this._vertexBuffer&&this._indexBuffer)this._indexBuffer.ensure(Math.max(e,u)),this._vertexBuffer.ensure(Math.max(t,u)),this._visibilityBuffer&&this._visibilityBuffer.ensure(Math.max(t,u));else{const r=this._layout.stride/Uint32Array.BYTES_PER_ELEMENT;this._indexBuffer=new i(\"index\",Math.max(e,u),1,this._bufferPool),this._vertexBuffer=new i(\"vertex\",Math.max(t,u),r,this._bufferPool),this.useVisibility&&(this._visibilityBuffer=new i(\"vertex\",Math.max(t,u),a/Uint32Array.BYTES_PER_ELEMENT,this._bufferPool))}}append(e){const t=e.layout.stride,i=e.indices.byteLength/Uint32Array.BYTES_PER_ELEMENT,r=e.vertices.byteLength/t;this._ensure(i,r);const{vertices:s,indices:f}=e,o=this._vertexBuffer.insert(s,0,s.byteLength/t,0),n=new Uint32Array(r);new Float32Array(n.buffer).fill(255),this._visibilityBuffer&&this._visibilityBuffer.insert(n,0,n.byteLength/a,0);return{vertexFrom:o,indexFrom:this._indexBuffer.insert(f,0,f.byteLength/4,o)}}setEntityRecordRangeVisibility(e,t,i,r){if(!(t+i>e.length))for(let s=t;s<t+i;s++){const{vertexStart:t,vertexCount:i}=e[s];this._visibilityBuffer.setF32Range(t,t+i,r)}}getEntityRecordVisibility(e,t){const i=e.records[t];return this._visibilityBuffer.getF32(i.vertexStart)}copyRecordFrom(e,i,r,s){const{indexStart:f,indexCount:o,vertexStart:n,vertexCount:u}=i;this._ensure(o,u);const a=e._position,h=r*(a.packPrecisionFactor??1),l=s*(a.packPrecisionFactor??1),_=a.offset,d=t(h,l),y=this._vertexBuffer.copyFrom(e._vertexBuffer,n,u,d,_);this._visibilityBuffer&&e._visibilityBuffer&&this._visibilityBuffer.copyFrom(e._visibilityBuffer,n,u,0,0);const v=this._indexBuffer.copyFrom(e._indexBuffer,f,o,y-n,0),c=i.clone();return c.vertexStart=y,c.indexStart=v,c.overlaps=0,c}remove(e,t,i,r){this._indexBuffer.free(e,t),this._vertexBuffer.free(i,r),this._visibilityBuffer&&this._visibilityBuffer.free(i,r)}upload(){this._invalidatedGeometry=!0,this._invalidatedCompute=!0}getGeometryVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidatedGeometry){(this._vertexBuffer.invalidated||this._indexBuffer.invalidated||this._visibilityBuffer?.invalidated)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._visibilityBuffer&&this._visibilityBuffer.invalidate(),this._geometryVAO?.disposeVAOOnly(),this._geometryVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload(),this._visibilityBuffer&&this._visibilityBuffer.upload();const i=this._indexBuffer.getGPUBuffer(e,!1),r=new Map([[\"geometry\",this._vertexBuffer.getGPUBuffer(e)]]);if(this._visibilityBuffer&&r.set(\"visibility\",this._visibilityBuffer.getGPUBuffer(e)),!this._geometryVAO){const s=_(this.layout,t);s.set(\"visibility\",_(l,t).get(\"geometry\")),this._geometryVAO=new n(e,t.locations,s,r,i)}this._invalidatedGeometry=!1}return this._geometryVAO}getComputeVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidatedCompute){(this._vertexBuffer.invalidated||this._indexBuffer.invalidatedComputeBuffer)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._visibilityBuffer&&this._visibilityBuffer.invalidate(),this._computeVAO?.disposeVAOOnly(),this._computeVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload(),this._visibilityBuffer&&this._visibilityBuffer.upload();const i=this._indexBuffer.getGPUBuffer(e,!0),r=new Map([[\"geometry\",this._vertexBuffer.getGPUBuffer(e)]]);if(this._visibilityBuffer&&r.set(\"visibility\",this._visibilityBuffer.getGPUBuffer(e)),!this._computeVAO){const s=d(this.layout,t);s.set(\"visibility\",_(l,t).get(\"geometry\")),this._computeVAO=new n(e,t.locations,s,r,i),this._invalidatedCompute=!1}}return this._computeVAO}get memoryStats(){return{bytesUsed:this._vertexBuffer.memoryStats.bytesUsed+this._indexBuffer.memoryStats.bytesUsed,bytesReserved:this._vertexBuffer.memoryStats.bytesReserved+this._indexBuffer.memoryStats.bytesReserved,vertex:this._vertexBuffer.memoryStats,index:this._indexBuffer.memoryStats}}reshuffle(e){this._vertexBuffer&&this._vertexBuffer.reshuffle(e.vertex.count,e.vertex.operations),this._indexBuffer&&this._indexBuffer.reshuffle(e.index.count,e.index.operations),this._visibilityBuffer&&this._visibilityBuffer.reshuffle(e.vertex.count,e.vertex.operations)}}export{y as MappedMesh};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport{Program as r}from\"./Program.js\";function e(e,t,a=\"\"){return new r(e,a+t.shaders.vertexShader,a+t.shaders.fragmentShader,t.attributes)}export{e as createProgram};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport r from\"./shaderRepository.js\";import{ShaderCompiler as e}from\"../../../../../webgl/ShaderCompiler.js\";function o(r){return function(e){let o=r;return e.split(\"/\").forEach((r=>{o&&(o=o[r])})),o}}const t=new e(o(r));function n(r){return t.resolveIncludes(r)}export{n as resolveIncludes};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nconst e={background:{\"background.frag\":\"uniform lowp vec4 u_color;\\nvoid main() {\\ngl_FragColor = u_color;\\n}\",\"background.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump vec2 u_coord_range;\\nuniform mediump float u_depth;\\nvoid main() {\\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\n}\"},bitBlit:{\"bitBlit.frag\":\"uniform lowp sampler2D u_tex;\\nuniform lowp float u_opacity;\\nvarying mediump vec2 v_uv;\\nvoid main() {\\nlowp vec4 color = texture2D(u_tex, v_uv);\\ngl_FragColor = color * u_opacity;\\n}\",\"bitBlit.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_tex;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\ngl_Position = vec4(a_pos , 0.0, 1.0);\\nv_uv = a_tex;\\n}\"},debug:{overlay:{\"overlay.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvoid main(void) {\\ngl_FragColor = v_color;\\n}\",\"overlay.vert\":\"attribute vec3 a_PositionAndFlags;\\nuniform mat3 u_dvsMat3;\\nuniform vec4 u_colors[4];\\nuniform float u_opacities[4];\\nvarying vec4 v_color;\\nvoid main(void) {\\nvec2 position = a_PositionAndFlags.xy;\\nfloat flags = a_PositionAndFlags.z;\\nint colorIndex = int(mod(flags, 4.0));\\nvec4 color;\\nfor (int i = 0; i < 4; i++) {\\ncolor = u_colors[i];\\nif (i == colorIndex) {\\nbreak;\\n}\\n}\\nint opacityIndex = int(mod(floor(flags / 4.0), 4.0));\\nfloat opacity;\\nfor (int i = 0; i < 4; i++) {\\nopacity = u_opacities[i];\\nif (i == opacityIndex) {\\nbreak;\\n}\\n}\\nv_color = color * opacity;\\ngl_Position = vec4((u_dvsMat3 * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\"}},dot:{dot:{\"dot.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nuniform highp float u_tileZoomFactor;\\nvoid main()\\n{\\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\\ngl_FragColor = v_color * alpha;\\n}\",\"dot.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nuniform sampler2D u_texture;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp float u_tileZoomFactor;\\nuniform highp float u_dotSize;\\nuniform highp float u_pixelRatio;\\nvarying vec2 v_pos;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nconst float EPSILON = 0.000001;\\nvoid main()\\n{\\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\\n0., -1., 0.,\\n0., 1., 1.  );\\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\\nv_color = texture2D(u_texture, texCoords.xy);\\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\\nfloat z = 0.;\\nz += 2.0 * step(v_color.a, EPSILON);\\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\\nv_dotRatio = u_dotSize / gl_PointSize;\\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\\n}\"}},filtering:{\"bicubic.glsl\":\"vec4 computeWeights(float v) {\\nfloat b = 1.0 / 6.0;\\nfloat v2 = v * v;\\nfloat v3 = v2 * v;\\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\\nfloat w3 = b * v3;\\nreturn vec4(w0, w1, w2, w3);\\n}\\nvec4 bicubicOffsetsAndWeights(float v) {\\nvec4 w = computeWeights(v);\\nfloat g0 = w.x + w.y;\\nfloat g1 = w.z + w.w;\\nfloat h0 = 1.0 - (w.y / g0) + v;\\nfloat h1 = 1.0 + (w.w / g1) - v;\\nreturn vec4(h0, h1, g0, g1);\\n}\\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\\nvec2 texel = coords * texSize - 0.5;\\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\\nvec2 coords10 = coords + hgX.x * eX;\\nvec2 coords00 = coords - hgX.y * eX;\\nvec2 coords11 = coords10 + hgY.x * eY;\\nvec2 coords01 = coords00 + hgY.x * eY;\\ncoords10 = coords10 - hgY.y * eY;\\ncoords00 = coords00 - hgY.y * eY;\\nvec4 color00 = texture2D(sampler, coords00);\\nvec4 color10 = texture2D(sampler, coords10);\\nvec4 color01 = texture2D(sampler, coords01);\\nvec4 color11 = texture2D(sampler, coords11);\\ncolor00 = mix(color00, color01, hgY.z);\\ncolor10 = mix(color10, color11, hgY.z);\\ncolor00 = mix(color00, color10, hgX.z);\\nreturn color00;\\n}\",\"bilinear.glsl\":\"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 texelStart = floor(coords * texSize);\\nvec2 coord0 = texelStart / texSize;\\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\\nvec4 color0 = texture2D(sampler, coord0);\\nvec4 color1 = texture2D(sampler, coord1);\\nvec4 color2 = texture2D(sampler, coord2);\\nvec4 color3 = texture2D(sampler, coord3);\\nvec2 blend = fract(coords * texSize);\\nvec4 color01 = mix(color0, color1, blend.x);\\nvec4 color23 = mix(color2, color3, blend.x);\\nvec4 color = mix(color01, color23, blend.y);\\n#ifdef NNEDGE\\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\\n#endif\\nreturn color;\\n}\",\"epx.glsl\":\"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\\nvec2 invSize = 1.0 / texSize;\\nvec2 texel = coords * texSize;\\nvec2 texel_i = floor(texel);\\nvec2 texel_frac = fract(texel);\\nvec4 colorP = texture2D(sampler, texel_i * invSize);\\nvec4 colorP1 = vec4(colorP);\\nvec4 colorP2 = vec4(colorP);\\nvec4 colorP3 = vec4(colorP);\\nvec4 colorP4 = vec4(colorP);\\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\\ncolorP1 = colorA;\\n}\\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\\ncolorP2 = colorB;\\n}\\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\\ncolorP3 = colorC;\\n}\\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\\ncolorP4 = colorD;\\n}\\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\\nreturn mix(colorP12, colorP34, texel_frac.y);\\n}\"},heatmap:{heatmapResolve:{\"heatmapResolve.frag\":\"precision highp float;\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 4.0\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform sampler2D u_texture;\\nuniform sampler2D u_gradient;\\nuniform vec2 u_densityMinAndInvRange;\\nuniform float u_densityNormalization;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 data = texture2D(u_texture, v_uv);\\nfloat density = data.r * COMPRESSION_FACTOR;\\ndensity *= u_densityNormalization;\\ndensity = (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\\nvec4 color = texture2D(u_gradient, vec2(density, 0.5));\\ngl_FragColor = vec4(color.rgb * color.a, color.a);\\n}\",\"heatmapResolve.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nvarying vec2 v_uv;\\nvoid main() {\\nv_uv = a_pos;\\ngl_Position = vec4(a_pos * 2.0 - 1.0, 1., 1.);\\n}\"}},highlight:{\"blur.frag\":\"varying mediump vec2 v_texcoord;\\nuniform mediump vec4 u_direction;\\nuniform mediump mat4 u_channelSelector;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_texture;\\nmediump float gauss1(mediump vec2 dir) {\\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\\n}\\nmediump vec4 selectChannel(mediump vec4 sample) {\\nreturn u_channelSelector * sample;\\n}\\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\\nmediump float w = gauss1(i * u_direction.xy);\\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\\nweight += w;\\n}\\nvoid main(void) {\\nmediump float tot = 0.0;\\nmediump float weight = 0.0;\\naccumGauss1(-5.0, tot, weight);\\naccumGauss1(-4.0, tot, weight);\\naccumGauss1(-3.0, tot, weight);\\naccumGauss1(-2.0, tot, weight);\\naccumGauss1(-1.0, tot, weight);\\naccumGauss1(0.0, tot, weight);\\naccumGauss1(1.0, tot, weight);\\naccumGauss1(2.0, tot, weight);\\naccumGauss1(3.0, tot, weight);\\naccumGauss1(4.0, tot, weight);\\naccumGauss1(5.0, tot, weight);\\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\\n}\",\"highlight.frag\":\"varying mediump vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_shade;\\nuniform mediump vec2 u_minMaxDistance;\\nmediump float estimateDistance() {\\nmediump float y = texture2D(u_texture, v_texcoord)[3];\\nconst mediump float y0 = 0.5;\\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\\nmediump float d = (y - y0) / m0;\\nreturn d;\\n}\\nmediump vec4 shade(mediump float d) {\\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\\n}\\nvoid main(void) {\\nmediump float d = estimateDistance();\\ngl_FragColor = shade(d);\\n}\",\"textured.vert\":\"attribute mediump vec2 a_position;\\nattribute mediump vec2 a_texcoord;\\nvarying mediump vec2 v_texcoord;\\nvoid main(void) {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},materials:{\"attributeData.glsl\":\"uniform highp sampler2D filterFlags;\\nuniform highp sampler2D animation;\\nuniform highp sampler2D gpgpu;\\nuniform highp sampler2D visualVariableData;\\nuniform highp sampler2D dataDriven0;\\nuniform highp sampler2D dataDriven1;\\nuniform highp sampler2D dataDriven2;\\nuniform float size;\\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\\nhighp vec3  texel = unpackDisplayIdTexel(id);\\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\\nhighp float col = mod(u32, size);\\nhighp float row = (u32 - col) / size;\\nhighp float u = col / size;\\nhighp float v = row / size;\\nreturn vec2(u, v);\\n}\\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(size));\\n}\\nhighp vec4 getFilterData(in highp vec3 id) {\\nvec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(filterFlags, coords);\\n}\\nhighp vec4 getAnimation(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(animation, coords);\\n}\\nhighp vec4 getVisualVariableData(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(visualVariableData, coords);\\n}\\nhighp vec4 getDataDriven0(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven0, coords);\\n}\\nhighp vec4 getDataDriven1(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven1, coords);\\n}\\nhighp vec4 getGPGPU(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(gpgpu, coords);\\n}\\nhighp vec4 getDataDriven2(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven2, coords);\\n}\\nfloat u88VVToFloat(in vec2 v) {\\nbool isMagic = v.x == 255.0 && v.y == 255.0;\\nif (isMagic) {\\nreturn NAN_MAGIC_NUMBER;\\n}\\nreturn (v.x + v.y * float(0x100)) - 32768.0;\\n}\",\"barycentric.glsl\":\"float inTriangle(vec3 bary) {\\nvec3 absBary = abs(bary);\\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\\n}\\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\\nmat3 xyToBarycentricMat3 = mat3(\\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\\n);\\nfloat A2 = v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\\n}\",\"constants.glsl\":\"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\\nconst float C_RAD_TO_DEG = 180.0 / 3.141592654;\\nconst float POSITION_PRECISION = 1.0 / 8.0;\\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\\nconst float SOFT_EDGE_RATIO = 1.0;\\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\\nconst float THIN_LINE_HALF_WIDTH = 1.0;\\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\\nconst float OFFSET_PRECISION = 1.0 / 8.0;\\nconst float OUTLINE_SCALE = 1.0 / 5.0;\\nconst float SDF_FONT_SIZE = 24.0;\\nconst float MAX_SDF_DISTANCE = 8.0;\\nconst float PLACEMENT_PADDING = 8.0;\\nconst float EPSILON = 0.00001;\\nconst float EPSILON_HITTEST = 0.05;\\nconst int MAX_FILTER_COUNT = 2;\\nconst int ATTR_VV_SIZE = 0;\\nconst int ATTR_VV_COLOR = 1;\\nconst int ATTR_VV_OPACITY = 2;\\nconst int ATTR_VV_ROTATION = 3;\\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY = 4;\\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET = 2;\\nconst int BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR = 3;\\nconst int BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR = 5;\\nconst int BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR = 6;\\nconst int BITSET_LINE_SCALE_DASH = 2;\",fill:{\"common.glsl\":\"#include <materials/symbologyTypeUtils.glsl>\\n#ifdef PATTERN\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform lowp vec4 u_isActive[ 2 ];\\nuniform highp float u_dotValue;\\nuniform highp float u_tileDotsOverArea;\\nuniform highp float u_dotTextureDotCount;\\nuniform mediump float u_tileZoomFactor;\\n#endif\\nvarying highp vec3 v_id;\\nvarying lowp vec4 v_color;\\nvarying lowp float v_opacity;\\nvarying mediump vec4 v_aux1;\\n#ifdef PATTERN\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvarying lowp float v_isOutline;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvarying highp vec2 v_dotTextureCoords;\\nvarying highp vec4 v_dotThresholds[ 2 ];\\n#endif\",\"fill.frag\":\"precision highp float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/fill/common.glsl>\\n#ifdef PATTERN\\nuniform lowp sampler2D u_texture;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform mediump mat4 u_dotColors[ 2 ];\\nuniform sampler2D u_dotTextures[ 2 ];\\nuniform vec4 u_dotBackgroundColor;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\nlowp vec4 drawLine() {\\nfloat v_lineWidth = v_aux1.x;\\nvec2  v_normal    = v_aux1.yz;\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineWidth,\\nv_opacity,\\nv_id\\n);\\nreturn shadeLine(inputs);\\n}\\n#endif\\nlowp vec4 drawFill() {\\nlowp vec4 out_color = vec4(0.);\\n#ifdef HITTEST\\nout_color = v_color;\\n#elif defined(PATTERN)\\nmediump vec4 v_tlbr = v_aux1;\\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\\nlowp vec4 color = texture2D(u_texture, samplePos);\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\nout_color = v_opacity * v_color * color;\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY && !defined(HIGHLIGHT)\\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\\n#ifdef DD_DOT_BLENDING\\nvec4 isPositive0 = step(0.0, difference0);\\nvec4 isPositive1 = step(0.0, difference1);\\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\\nfloat lessThanEqZero = step(weightSum, 0.0);\\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\\nfloat divisor = (weightSum + lessThanEqZero);\\nvec4 weights0 = difference0 * isPositive0 / divisor;\\nvec4 weights1 = difference1 * isPositive1 / divisor;\\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\\n#else\\nfloat diffMax = max(max4(difference0), max4(difference1));\\nfloat lessThanZero = step(diffMax, 0.0);\\nfloat greaterOrEqZero = 1.0 - lessThanZero;\\nvec4 isMax0 = step(diffMax, difference0);\\nvec4 isMax1 = step(diffMax, difference1);\\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\\n#endif\\nout_color = preEffectColor;\\n#else\\nout_color = v_opacity * v_color;\\n#endif\\n#ifdef HIGHLIGHT\\nout_color.a = 1.0;\\n#endif\\nreturn out_color;\\n}\\nvoid main() {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (v_isOutline > 0.5) {\\ngl_FragColor = drawLine();\\n} else {\\ngl_FragColor = drawFill();\\n}\\n#else\\ngl_FragColor = drawFill();\\n#endif\\n}\",\"fill.vert\":\"#include <materials/symbologyTypeUtils.glsl>\\n#define PACKED_LINE\\nprecision highp float;\\nattribute float a_bitset;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nattribute float a_inverseArea;\\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#else\\nattribute vec4 a_color;\\nattribute vec4 a_aux2;\\nattribute vec4 a_aux3;\\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\nattribute vec4 a_aux1;\\nattribute vec2 a_zoomRange;\\n#else\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#endif\\n#endif\\nuniform vec2 u_tileOffset;\\nuniform vec2 u_maxIntNumOfCrossing;\\n#include <util/encoding.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/fill/common.glsl>\\n#include <materials/fill/hittest.glsl>\\nconst float INV_SCALE_COMPRESSION_FACTOR = 1.0 / 128.0;\\nconst float MAX_REPRESENTABLE_INT = 16777216.0;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\\n}\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\\nLineData outputs = buildLine(\\nout_pos,\\na_id,\\na_pos,\\na_color,\\n(a_aux3.xy - 128.) / 16.,\\n(a_aux3.zw - 128.) / 16.,\\n0.,\\na_aux2.z / 16.,\\na_bitset,\\nvec4(0.),\\nvec2(0.),\\na_aux2.w / 16.\\n);\\nv_id      = outputs.id;\\nv_opacity = outputs.opacity;\\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\\nout_color = outputs.color;\\n}\\n#endif\\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\\nfloat a_bitSet = a_bitset;\\nout_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\\n0., -2. / 512.,  0.,\\n-1.,  1.,  1.  );\\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\\n#else\\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\\n#endif\\n#ifdef PATTERN\\nvec4  a_tlbr   = a_aux1;\\nfloat a_width  = a_aux2.x;\\nfloat a_height = a_aux2.y;\\nvec2  a_offset = a_aux2.zw;\\nvec2  a_scale  = a_aux3.xy;\\nfloat a_angle  = a_aux3.z;\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR) > 0.5) {\\na_width *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR) > 0.5) {\\na_height *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nvec2 scale = INV_SCALE_COMPRESSION_FACTOR * a_scale;\\nfloat width = u_zoomFactor * a_width * scale.x;\\nfloat height = u_zoomFactor * a_height * scale.y;\\nfloat angle = C_256_TO_RAD * a_angle;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nfloat dx = 0.0;\\nfloat dy = 0.0;\\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) > 0.5) {\\nfloat id = rgba2float(vec4(a_id, 0.0));\\ndx = rand(vec2(id, 0.0));\\ndy = rand(vec2(0.0, id));\\n}\\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\\n-sinA / width, cosA / height, 0,\\ndx,            dy,           1);\\nvec2 patternSize = vec2(a_width, a_height);\\nvec2 numPatternsPerMaxInt = vec2(MAX_REPRESENTABLE_INT) / patternSize;\\nvec2 maxIntCrossingOffsetCorrection = patternSize * fract(u_maxIntNumOfCrossing * numPatternsPerMaxInt);\\nvec2 tileOffset = u_tileOffset + maxIntCrossingOffsetCorrection - 0.5 * patternSize;\\ntileOffset = vec2(tileOffset.x * cosA - tileOffset.y * sinA, tileOffset.x * sinA + tileOffset.y * cosA);\\ntileOffset = mod(tileOffset, patternSize);\\nvec2 symbolOffset = u_zoomFactor * scale * vec2(a_offset - tileOffset) / vec2(width, height);\\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\\nv_sampleAlphaOnly = getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\nif (getBit(a_bitSet, BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR) > 0.5) {\\n#ifdef VV_COLOR\\nv_sampleAlphaOnly *= (1.0 - float(isNan(VV_ADATA[ATTR_VV_COLOR]))) * (1.0 - getBit(a_bitSet, BITSET_GENERIC_LOCK_COLOR));\\n#else\\nv_sampleAlphaOnly = 0.0;\\n#endif\\n}\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\\n#endif\\n}\\n#ifdef HITTEST\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\\nout_pos = vec3(0., 0., 2.);\\nreturn;\\n}\\n#endif\\nhittestFill(out_color, out_pos);\\ngl_PointSize = 1.0;\\n}\\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\\nif (v_isOutline > 0.5) {\\ndrawLine(out_color, out_pos);\\n} else {\\ndrawFill(out_color, out_pos);\\n}\\n}\\n#else\\n#define draw drawFill\\n#endif\\nvoid main()\\n{\\nINIT;\\nhighp vec3 pos  = vec3(0.);\\nhighp vec4 color  = vec4(0.);\\ndraw(color, pos);\\nv_color = color;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\",\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestFill(\\nout lowp vec4 out_color,\\nout highp vec3 out_pos\\n) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\\nfloat hittestDist = u_hittestDist;\\nfloat dist = distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist < 0. || dist >= hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist == 0. ? (1. / 255.) : 0.);\\n}\\n#endif\"},hittest:{\"common.glsl\":\"#ifdef HITTEST\\nuniform float hittestDist;\\nuniform highp vec2 hittestPos;\\nfloat projectScalar(vec2 a, vec2 b) {\\nreturn dot(a, normalize(b));\\n}\\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\\nvec2 L = p2 - p1;\\nvec2 A = p0 - p1;\\nfloat projAL = projectScalar(A, L);\\nfloat t = clamp(projAL / length(L), 0., 1.);\\nreturn distance(p0, p1 + t * (p2 - p1));\\n}\\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\\nfloat dist = distance(pos, vec3(hittestPos, 1.));\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif ((dist - size) > hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, (dist - size) < 0. ? (1. / 255.) : 0.);\\n}\\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\\nreturn inTriangle(xyToBarycentric(p, a, b, c));\\n}\\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\\nvec2 ba = b - a;\\nvec2 ca = c - a;\\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\\nbool isParallel = crossProduct < EPSILON_HITTEST && crossProduct > -EPSILON_HITTEST;\\nif (isParallel) {\\nreturn -1.;\\n}\\nif (intersectPointTriangleBary(p.xy, a, b, c) == 1.) {\\nreturn 0.;\\n}\\nfloat distAB = distPointSegment(p, a, b);\\nfloat distBC = distPointSegment(p, b, c);\\nfloat distCA = distPointSegment(p, c, a);\\nreturn min(min(distAB, distBC), distCA);\\n}\\n#endif\"},icon:{\"common.glsl\":\"#include <util/encoding.glsl>\\nuniform lowp vec2 u_mosaicSize;\\nvarying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying highp vec4 v_sizeTex;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nuniform lowp sampler2D u_texture;\\n#ifdef SDF\\nvarying lowp vec4 v_outlineColor;\\nvarying mediump float v_outlineWidth;\\nvarying mediump float v_distRatio;\\nvarying mediump float v_overridingOutlineColor;\\nvarying mediump float v_isThin;\\n#endif\\n#ifdef SDF\\nvec4 getColor(vec2 v_size, vec2 v_tex) {\\n#ifdef HITTEST\\nlowp vec4 fillPixelColor = vec4(1.0);\\n#else\\nlowp vec4 fillPixelColor = v_color;\\n#endif\\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\\nfloat size = max(v_size.x, v_size.y);\\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\\nfloat outlineWidth = v_outlineWidth;\\n#ifdef HIGHLIGHT\\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\\n#endif\\nif (outlineWidth > 0.25) {\\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\\nfloat clampedOutlineSize = min(outlineWidth, size);\\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\\n}\\nreturn v_opacity * fillPixelColor;\\n}\\n#else\\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\\nlowp vec4 texColor = texture2D(u_texture, v_tex);\\nreturn v_opacity * texColor * v_color;\\n}\\n#endif\",heatmapAccumulate:{\"common.glsl\":\"varying lowp vec4 v_hittestResult;\\nvarying mediump vec2 v_offsetFromCenter;\\nvarying highp float v_fieldValue;\",\"heatmapAccumulate.frag\":\"precision mediump float;\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 0.25\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform lowp sampler2D u_texture;\\nvoid main() {\\n#ifdef HITTEST\\ngl_FragColor = v_hittestResult;\\n#else\\nfloat radius = length(v_offsetFromCenter);\\nfloat shapeWeight = step(radius, 1.0);\\nfloat oneMinusRadiusSquared = 1.0 - radius * radius;\\nfloat kernelWeight = oneMinusRadiusSquared * oneMinusRadiusSquared;\\ngl_FragColor = vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\\n#endif\\n}\",\"heatmapAccumulate.vert\":\"precision highp float;\\nattribute vec2 a_vertexOffset;\\nvec4 a_color = vec4(0.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\nuniform float u_radius;\\nuniform float u_isFieldActive;\\n#include <materials/vcommon.glsl>\\n#include <materials/hittest/common.glsl>\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\nvoid main() {\\nfloat filterFlags = getFilterFlags();\\n#ifdef HITTEST\\nhighp vec4 out_hittestResult = vec4(0.);\\nhighp vec3 out_pos = vec3(0.);\\nvec3 pos = u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\\nv_hittestResult = out_hittestResult;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\nv_offsetFromCenter = sign(a_vertexOffset);\\nv_fieldValue = getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\\nvec3 centerPos = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec3 vertexPos = centerPos + u_displayViewMat3 * vec3(v_offsetFromCenter, 0.0) * u_radius;\\ngl_Position = vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_vertexOffset1;\\nattribute vec2 a_vertexOffset2;\\nattribute vec2 a_texCoords1;\\nattribute vec2 a_texCoords2;\\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\\n}\\nvoid hittestIcon(\\ninout lowp vec4 out_color,\\nout highp vec3 out_pos,\\nin vec3 pos,\\nin vec3 offset,\\nin vec2 size,\\nin float scaleFactor,\\nin float isMapAligned\\n) {\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nvec3 posBase = u_viewMat3 * u_tileMat3  * pos;\\nvec3 offset1 = scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\\nvec3 offset2 = scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\\nvec2 pos0    = (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\\nvec2 pos1    = (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\\nvec2 pos2    = (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\\nvec3 bary0 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary1 = xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary2 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary3 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary4 = xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\\nvec3 bary5 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary6 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec3 bary7 = xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\\nvec3 bary8 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec2 tex0 = a_texCoords  / u_mosaicSize;\\nvec2 tex1 = a_texCoords1 / u_mosaicSize;\\nvec2 tex2 = a_texCoords2 / u_mosaicSize;\\nfloat alphaSum = 0.;\\nalphaSum += inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\\nout_pos.z += step(alphaSum, .05) * 2.0;\\nout_color = vec4(1. / 255., 0., 0., alphaSum / 255.);\\n}\\n#endif\",\"icon.frag\":\"precision mediump float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/icon/common.glsl>\\nvoid main()\\n{\\n#ifdef HITTEST\\nvec4 color = v_color;\\n#else\\nvec4 color = getColor(v_sizeTex.xy, v_sizeTex.zw);\\n#endif\\n#ifdef HIGHLIGHT\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"icon.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_outlineColor;\\nattribute vec4 a_sizeAndOutlineWidth;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nattribute vec2 a_bitSetAndDistRatio;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/icon/common.glsl>\\n#include <materials/icon/hittest.glsl>\\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat f = getSize(size.y) / size.y;\\nfloat sizeFactor = size.y / referenceSize;\\nreturn getSize(referenceSize) / referenceSize;\\n#else\\nreturn 1.;\\n#endif\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_bitSet = a_bitSetAndDistRatio.x;\\nvec3  pos           = vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec2  size          = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\\nvec3  offset        = vec3(a_vertexOffset / 16.0, 0.);\\nfloat outlineSize   = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\\nfloat isMapAligned  = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nfloat referenceSize = a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\\nfloat scaleSymbolProportionally = getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\nfloat scaleFactor               = getMarkerScaleFactor(size, referenceSize);\\nsize.xy     *= scaleFactor;\\noffset.xy   *= scaleFactor;\\noutlineSize *= scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\\nvec2 v_tex   = a_texCoords / u_mosaicSize;\\nfloat filterFlags = getFilterFlags();\\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity  = getOpacity();\\nv_id       = norm(a_id);\\nv_pos      = u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\\nv_sizeTex  = vec4(size.xy, v_tex.xy);\\n#ifdef SDF\\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\\n#ifdef VV_COLOR\\nv_overridingOutlineColor = v_isThin;\\n#else\\nv_overridingOutlineColor = 0.0;\\n#endif\\nv_outlineWidth = min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\\nv_outlineColor = a_outlineColor;\\nv_distRatio = a_bitSetAndDistRatio.y / 128.0;\\n#endif\\n#ifdef HITTEST\\nhighp vec4 out_color = vec4(0.);\\nhighp vec3 out_pos   = vec3(0.);\\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\\nv_color = out_color;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},label:{\"common.glsl\":\"uniform mediump float u_zoomLevel;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_mapAligned;\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying mediump vec2 v_tex;\\nvarying mediump vec4 v_color;\\nvarying lowp vec4 v_animation;\",\"label.frag\":\"#include <materials/text/text.frag>\",\"label.vert\":\"precision highp float;\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texAndSize;\\nattribute vec4 a_refSymbolAndPlacementOffset;\\nattribute vec4 a_glyphData;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nuniform float u_mapRotation;\\nuniform float u_mapAligned;\\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\\nfloat glyphAngle = angle * 360.0 / 254.0;\\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\\nfloat z = 0.0;\\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\\nreturn z;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat groupMinZoom    = getMinZoom();\\nfloat glyphMinZoom    = a_glyphData.x;\\nfloat glyphMaxZoom    = a_glyphData.y;\\nfloat glyphAngle      = a_glyphData.z;\\nfloat a_isBackground  = a_glyphData.w;\\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\\nfloat fontSize           = a_texAndSize.z;\\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor = (isBackground + isText) * a_color;\\nv_color     = animation * ((1.0 - u_isHaloPass) * nonHaloColor + (u_isHaloPass * a_haloColor));\\nv_opacity   = 1.0;\\nv_tex       = a_texCoords / u_mosaicSize;\\nv_edgeDistanceOffset = u_isHaloPass * haloSize / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\ngl_Position = vec4(v_pos, 1.0);\\n#ifdef DEBUG\\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\\n#endif\\n}\"},line:{\"common.glsl\":\"varying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying mediump vec2 v_normal;\\nvarying mediump float v_lineHalfWidth;\\nvarying lowp float v_opacity;\\n#ifdef PATTERN\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_patternSize;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nvarying highp float v_accumulatedDistance;\\n#endif\\n#ifdef SDF\\nvarying mediump float v_lineWidthRatio;\\n#endif\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\\n#ifdef HITTEST\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nfloat dist = min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist >= u_hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist <= 0. ? (1. / 255.) : 0.);\\n}\\n#endif\",\"line.frag\":\"precision lowp float;\\n#include <util/encoding.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\n#ifdef HITTEST\\nvoid main() {\\ngl_FragColor = v_color;\\n}\\n#else\\nvoid main() {\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineHalfWidth,\\nv_opacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr,\\nv_patternSize,\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance,\\n#endif\\n#endif\\nv_id\\n);\\ngl_FragColor = shadeLine(inputs);\\n}\\n#endif\",\"line.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_offsetAndNormal;\\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\\nattribute vec4 a_tlbr;\\nattribute vec4 a_segmentDirection;\\nattribute vec2 a_aux;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/line/hittest.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\n#ifdef HITTEST\\nvoid draw() {\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\\nfloat a_cimHalfWidth = a_aux.x / 16. ;\\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nhighp vec3 pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestLine(v_color, pos, halfWidth);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#else\\nvoid draw()\\n{\\nhighp vec3 pos = vec3(0.);\\nLineData outputs = buildLine(\\npos,\\na_id,\\na_pos,\\na_color,\\na_offsetAndNormal.xy / 16.,\\na_offsetAndNormal.zw / 16.,\\na_accumulatedDistanceAndHalfWidth.x,\\na_accumulatedDistanceAndHalfWidth.y / 16.,\\na_segmentDirection.w,\\na_tlbr,\\na_segmentDirection.xy / 16.,\\na_aux.x / 16.\\n);\\nv_id              = outputs.id;\\nv_color           = outputs.color;\\nv_normal          = outputs.normal;\\nv_lineHalfWidth   = outputs.lineHalfWidth;\\nv_opacity         = outputs.opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr          = outputs.tlbr;\\nv_patternSize   = outputs.patternSize;\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio = outputs.lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance = outputs.accumulatedDistance;\\n#endif\\n#endif\\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#endif\\nvoid main() {\\nINIT;\\ndraw();\\n}\"},pie:{\"pie.common.glsl\":\"uniform float outlineWidth;\\nuniform mediump float sectorThreshold;\\nvarying vec3  v_id;\\nvarying vec3  v_pos;\\nvarying vec2  v_offset;\\nvarying vec4  v_color;\\nvarying float v_size;\\nvarying float v_numOfEntries;\\nvarying float v_maxSectorAngle;\\nvarying vec2  v_filteredSectorToColorId[numberOfFields];\\nvarying vec2  v_texCoords;\\nvarying float v_outlineWidth;\\nvarying float v_opacity;\\nstruct FilteredChartInfo {\\nfloat endSectorAngle;\\nint colorId;\\n};\",\"pie.frag\":\"precision highp float;\\n#include <util/atan2.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/pie/pie.common.glsl>\\nuniform lowp vec4 colors[numberOfFields];\\nuniform lowp vec4 defaultColor;\\nuniform lowp vec4 othersColor;\\nuniform lowp vec4 outlineColor;\\nuniform float donutRatio;\\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[numberOfFields]) {\\nmediump int colorIndex = int(filteredSectorToColorId[index].y);\\nreturn colors[colorIndex];\\n}\\nconst int OTHER_SECTOR_ID = 255;\\n#ifdef HITTEST\\nvec4 getColor() {\\nfloat distanceSize = length(v_offset) * v_size;\\nfloat donutSize = donutRatio * v_size;\\nfloat alpha = step(donutSize, distanceSize) * (1.0 - step(v_size, distanceSize));\\nreturn v_color;\\n}\\n#else\\nvec4 getColor() {\\nfloat angle = 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\\nif (angle < 0.0) {\\nangle += 360.0;\\n} else if (angle > 360.0) {\\nangle = mod(angle, 360.0);\\n}\\nint numOfEntries = int(v_numOfEntries);\\nfloat maxSectorAngle = v_maxSectorAngle;\\nlowp vec4 fillColor = (maxSectorAngle > 0.0 || sectorThreshold > 0.0) ? othersColor : defaultColor;\\nlowp vec4 prevColor = vec4(0.0);\\nlowp vec4 nextColor = vec4(0.0);\\nfloat startSectorAngle = 0.0;\\nfloat endSectorAngle = 0.0;\\nif (angle < maxSectorAngle) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nstartSectorAngle = endSectorAngle;\\nendSectorAngle = v_filteredSectorToColorId[index].x;\\nif (endSectorAngle > angle) {\\nfillColor = getSectorColor(index, v_filteredSectorToColorId);\\nprevColor = sectorThreshold != 0.0 && index == 0 && abs(360.0 - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index > 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = sectorThreshold != 0.0 && abs(endSectorAngle - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index < numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\\nbreak;\\n}\\nif (index == numOfEntries - 1) {\\nbreak;\\n}\\n}\\n} else {\\nprevColor = getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = getSectorColor(0, v_filteredSectorToColorId);\\nstartSectorAngle = maxSectorAngle;\\nendSectorAngle = 360.0;\\n}\\nlowp vec4 outlineColor = outlineColor;\\nfloat offset = length(v_offset);\\nfloat distanceSize = offset * v_size;\\nif (startSectorAngle != 0.0 || endSectorAngle != 360.0) {\\nfloat distanceToStartSector = (angle - startSectorAngle);\\nfloat distanceToEndSector = (endSectorAngle - angle);\\nfloat sectorThreshold = 0.6;\\nfloat beginSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\\nfloat endSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\\nif (endSectorAlpha > 0.0) {\\nfillColor = mix(nextColor, fillColor, endSectorAlpha);\\n} else if (beginSectorAlpha > 0.0) {\\nfillColor = mix(prevColor, fillColor, beginSectorAlpha);\\n}\\n}\\nfloat donutSize = donutRatio * (v_size - v_outlineWidth);\\nfloat endOfDonut = donutSize - v_outlineWidth;\\nfloat aaThreshold = 0.75;\\nfloat innerCircleAlpha = endOfDonut - aaThreshold > 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\\nfloat outerCircleAlpha = 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\\nfloat circleAlpha = innerCircleAlpha * outerCircleAlpha;\\nfloat startOfOutline = v_size - v_outlineWidth;\\nif (startOfOutline > 0.0 && v_outlineWidth > 0.25) {\\nfloat outlineFactor = smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\\nfloat innerLineFactor = donutSize - aaThreshold > 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\\nfillColor = mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\\n}\\nreturn v_opacity * circleAlpha * fillColor;\\n}\\n#endif\\nvoid main()\\n{\\nvec4 color = getColor();\\n#ifdef highlight\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"pie.vert\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/barycentric.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/pie/pie.common.glsl>\\n#include <materials/hittest/common.glsl>\\nattribute float a_bitSet;\\nattribute vec2  a_offset;\\nattribute vec2  a_texCoords;\\nattribute vec2  a_size;\\nattribute float a_referenceSize;\\nattribute vec2  a_zoomRange;\\nint filterValue(in float sectorAngle,\\nin int currentIndex,\\ninout FilteredChartInfo filteredInfo,\\ninout vec2 filteredSectorToColorId[numberOfFields]) {\\nif (sectorAngle > sectorThreshold * 360.0) {\\nfilteredInfo.endSectorAngle += sectorAngle;\\nfilteredSectorToColorId[filteredInfo.colorId] = vec2(filteredInfo.endSectorAngle, currentIndex);\\n++filteredInfo.colorId;\\n}\\nreturn 0;\\n}\\nint filterValues(inout vec2 filteredSectorToColorId[numberOfFields],\\ninout FilteredChartInfo filteredInfo,\\nin float sectorAngles[numberOfFields]) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nfloat sectorValue = sectorAngles[index];\\nfilterValue(sectorValue, index, filteredInfo, filteredSectorToColorId);\\n}\\nreturn filteredInfo.colorId;\\n}\\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float a_referenceSize, in float bitSet) {\\nvec2 outSize = baseSize;\\n#ifdef VV_SIZE\\nfloat r = getSize(a_referenceSize, currentScale) / a_referenceSize;\\noutSize.xy *= r;\\noffset.xy *= r;\\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\\n#endif\\nreturn outSize;\\n}\\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nvec3  offset       = vec3(in_offset, 0.0);\\nreturn getMatrix(isMapAligned) * offset;\\n}\\nfloat filterNaNValues(in float value) {\\nreturn value != NAN_MAGIC_NUMBER && value > 0.0 ? value : 0.0;\\n}\\nvoid main()\\n{\\nINIT;\\nvec2  a_size   = a_size;\\nvec2  a_offset = a_offset / 16.0;\\nfloat outlineSize = outlineWidth;\\nfloat a_bitSet = a_bitSet;\\nfloat a_referenceSize = a_referenceSize;\\nvec2 a_texCoords = a_texCoords / 4.0;\\nvec2 markerSize = getMarkerSize(a_offset, a_size, outlineSize, a_referenceSize, a_bitSet);\\nfloat filterFlags = getFilterFlags();\\nvec3  pos         = vec3(a_pos / 10.0, 1.0);\\nv_opacity      = getOpacity();\\nv_id           = norm(a_id);\\nv_pos          = displayViewScreenMat3 * pos + getOffset(a_offset, a_bitSet);\\nv_offset       = sign(a_texCoords - 0.5);\\nv_size         = max(markerSize.x, markerSize.y);\\nv_outlineWidth = outlineSize;\\nfloat attributeData[10];\\nvec4 attributeData3 = getDataDriven0(a_id);\\nattributeData[0] = filterNaNValues(attributeData3.x);\\nattributeData[1] = filterNaNValues(attributeData3.y);\\nattributeData[2] = filterNaNValues(attributeData3.z);\\nattributeData[3] = filterNaNValues(attributeData3.w);\\n#if (numberOfFields > 4)\\nvec4 attributeData4 = getDataDriven1(a_id);\\nattributeData[4] = filterNaNValues(attributeData4.x);\\nattributeData[5] = filterNaNValues(attributeData4.y);\\nattributeData[6] = filterNaNValues(attributeData4.z);\\nattributeData[7] = filterNaNValues(attributeData4.w);\\n#endif\\n#if (numberOfFields > 8)\\nvec4 attributeData5 = getDataDriven2(a_id);\\nattributeData[8] = filterNaNValues(attributeData5.x);\\nattributeData[9] = filterNaNValues(attributeData5.y);\\n#endif\\nfloat sum = 0.0;\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsum += attributeData[i];\\n}\\nfloat sectorAngles[numberOfFields];\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsectorAngles[i] = 360.0 * attributeData[i] / sum;\\n}\\nvec2 filteredSectorToColorId[numberOfFields];\\nFilteredChartInfo filteredInfo = FilteredChartInfo(0.0, 0);\\nint numOfEntries = filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\\nv_numOfEntries = float(numOfEntries);\\nv_maxSectorAngle = filteredInfo.endSectorAngle;\\nv_filteredSectorToColorId = filteredSectorToColorId;\\n#ifdef HITTEST\\nhighp vec3 out_pos = vec3(0.0);\\nv_color            = vec4(0.0);\\nhittestMarker(v_color, out_pos, viewMat3 * tileMat3 *  pos, v_size);\\ngl_PointSize = 1.0;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},shared:{line:{\"common.glsl\":\"#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\nstruct LineData {\\nlowp vec4 color;\\nmediump vec2 normal;\\nmediump float lineHalfWidth;\\nlowp float opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nmediump vec4 tlbr;\\nmediump vec2 patternSize;\\n#endif\\n#ifdef SDF\\nmediump float lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nhighp float accumulatedDistance;\\n#endif\\n#endif\\nhighp vec3 id;\\n};\",\"line.frag\":\"uniform lowp float u_blur;\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && !defined(HIGHLIGHT)\\n#if defined(PATTERN) || defined(SDF)\\nuniform sampler2D u_texture;\\nuniform highp float u_pixelRatio;\\n#endif\\n#endif\\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\\nfloat dist = d * line.lineHalfWidth;\\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\\n}\\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float lineHalfWidth = line.lineHalfWidth;\\nmediump float adjustedPatternHeight = line.patternSize.y * 2.0 * lineHalfWidth / line.patternSize.x;\\nmediump float relativeTexY = fract(line.accumulatedDistance / adjustedPatternHeight);\\nmediump float relativeTexX = 0.5 + 0.5 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nlowp vec4 color = texture2D(u_texture, texCoord);\\n#ifdef VV_COLOR\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\n#endif\\nreturn line.opacity * line.color * color;\\n}\\n#else\\nlowp vec4 getLineColor(LineData line) {\\nreturn line.opacity * line.color;\\n}\\n#endif\\nvec4 shadeLine(LineData line)\\n{\\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\\nlowp vec4 out_color = getLineColor(line) * alpha;\\n#ifdef HIGHLIGHT\\nout_color.a = step(1.0 / 255.0, out_color.a);\\n#endif\\n#ifdef ID\\nif (out_color.a < 1.0 / 255.0) {\\ndiscard;\\n}\\nout_color = vec4(line.id, 0.0);\\n#endif\\nreturn out_color;\\n}\",\"line.vert\":\"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\\n#ifdef VV_SIZE\\nfloat refLineWidth = 2.0 * referenceHalfWidth;\\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\\n#else\\nreturn lineHalfWidth;\\n#endif\\n}\\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\\n#ifdef HIGHLIGHT\\nhalfWidth = max(halfWidth, 2.0);\\n#endif\\nreturn halfWidth;\\n}\\nvec2 getDist(in vec2 offset, in float halfWidth) {\\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nreturn thinLineFactor * halfWidth * offset;\\n}\\nLineData buildLine(\\nout vec3 out_pos,\\nin vec3 in_id,\\nin vec2 in_pos,\\nin vec4 in_color,\\nin vec2 in_offset,\\nin vec2 in_normal,\\nin float in_accumulatedDist,\\nin float in_lineHalfWidth,\\nin float in_bitSet,\\nin vec4 in_tlbr,\\nin vec2 in_segmentDirection,\\nin float in_referenceHalfWidth\\n)\\n{\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nfloat z         = 2.0 * step(baseWidth, 0.0);\\nvec2  dist      = getDist(in_offset, halfWidth);\\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvec4  color     = in_color;\\nfloat opacity   = 1.0;\\n#else\\nvec4  color     = getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nfloat opacity   = getOpacity();\\n#ifdef SDF\\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\\n#endif\\n#endif\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nv_sampleAlphaOnly = getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\n#endif\\nout_pos = vec3(pos.xy, z);\\nreturn LineData(\\ncolor,\\nin_normal,\\nhalfWidth,\\nopacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nin_tlbr / u_mosaicSize.xyxy,\\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\\n#endif\\n#ifdef SDF\\nlineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\\n#endif\\n#endif\\nnorm(in_id)\\n);\\n}\"}},\"symbologyTypeUtils.glsl\":\"#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\n#endif\",text:{\"common.glsl\":\"uniform highp vec2 u_mosaicSize;\\nvarying highp vec3 v_id;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying highp vec2 v_tex;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying lowp float v_transparency;\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\",\"text.frag\":\"precision mediump float;\\n#include <materials/text/common.glsl>\\nuniform lowp sampler2D u_texture;\\n#ifdef HITTEST\\nvec4 getColor() {\\nreturn v_color;\\n}\\n#else\\nvec4 getColor()\\n{\\nfloat SDF_CUTOFF = (2.0 / 8.0);\\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\\nlowp float dist = texture2D(u_texture, v_tex).a;\\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\\n#ifdef HIGHLIGHT\\nedge /= 2.0;\\n#endif\\nlowp float aa = v_antialiasingWidth;\\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\\nreturn alpha * v_color * v_opacity;\\n}\\n#endif\\nvoid main()\\n{\\ngl_FragColor = getColor();\\n}\",\"text.vert\":\"precision highp float;\\n#include <materials/utils.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\n#include <materials/text/hittest.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texFontSize;\\nattribute vec4 a_aux;\\nattribute vec2 a_zoomRange;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat r = getSize(referenceSize) / referenceSize;\\nbaseSize *= r;\\noffset.xy *= r;\\nreturn baseSize;\\n#endif\\nreturn baseSize;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_isBackground  = a_aux.y;\\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\\nfloat a_bitSet        = a_aux.w;\\nfloat a_fontSize      = a_texFontSize.z;\\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor  = (isBackground * a_color) + (isText * getColor(a_color, a_bitSet, 1));\\nv_color   = u_isHaloPass * a_haloColor + (1.0 - u_isHaloPass) * nonHaloColor;\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\nv_tex     = a_texCoords / u_mosaicSize;\\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\nv_edgeDistanceOffset = u_isHaloPass * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\n#ifdef HITTEST\\nhighp vec3 out_pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\\n+ u_tileMat3 * offset, fontSize / 2.);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#else\\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#endif\\n}\"},\"utils.glsl\":\"float rshift(in float u32, in int amount) {\\nreturn floor(u32 / pow(2.0, float(amount)));\\n}\\nfloat getBit(in float bitset, in int bitIndex) {\\nfloat offset = pow(2.0, float(bitIndex));\\nreturn mod(floor(bitset / offset), 2.0);\\n}\\nconst int maxHighlightReasons = 6;\\nfloat getFilterBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex + maxHighlightReasons);\\n}\\nfloat getHighlightBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex);\\n}\\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\\nfloat isAggregate = getBit(bitset.b, 7);\\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\\n}\\nvec4 unpack(in float u32) {\\nfloat r = mod(rshift(u32, 0), 255.0);\\nfloat g = mod(rshift(u32, 8), 255.0);\\nfloat b = mod(rshift(u32, 16), 255.0);\\nfloat a = mod(rshift(u32, 24), 255.0);\\nreturn vec4(r, g, b, a);\\n}\\nvec3 norm(in vec3 v) {\\nreturn v /= 255.0;\\n}\\nvec4 norm(in vec4 v) {\\nreturn v /= 255.0;\\n}\\nfloat max4(vec4 target) {\\nreturn max(max(max(target.x, target.y), target.z), target.w);\\n}\\nvec2 unpack_u8_nf32(vec2 bytes) {\\nreturn (bytes - 127.0) / 127.0;\\n}\\nhighp float rand(in vec2 co) {\\nhighp float a = 12.9898;\\nhighp float b = 78.233;\\nhighp float c = 43758.5453;\\nhighp float dt = dot(co, vec2(a,b));\\nhighp float sn = mod(dt, 3.14);\\nreturn fract(sin(sn) * c);\\n}\",\"vcommon.glsl\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/barycentric.glsl>\\nattribute vec2 a_pos;\\nattribute highp vec3 a_id;\\nuniform highp mat3 displayViewScreenMat3;\\nuniform highp mat3 displayViewMat3;\\nuniform highp mat3 displayMat3;\\nuniform highp mat3 tileMat3;\\nuniform highp mat3 viewMat3;\\nuniform highp float pixelRatio;\\nuniform mediump float zoomFactor;\\nuniform mediump float antialiasing;\\nuniform mediump float currentScale;\\nuniform mediump float currentZoom;\\nuniform mediump float metersPerSRUnit;\\nuniform mediump float activeReasons;\\nuniform mediump float highlightAll;\\nvec4 VV_ADATA = vec4(0.0);\\nvoid loadVisualVariableData(inout vec4 target) {\\ntarget.rgba = getVisualVariableData(a_id);\\n}\\n#ifdef VV\\n#define INIT loadVisualVariableData(VV_ADATA)\\n#else\\n#define INIT\\n#endif\\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\\n#ifdef VV_COLOR\\nfloat isColorLocked   = getBit(a_bitSet, index);\\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\\n#else\\nreturn a_color;\\n#endif\\n}\\nfloat getOpacity() {\\n#ifdef VV_OPACITY\\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\\n#else\\nreturn 1.0;\\n#endif\\n}\\nfloat getSize(in float in_size, in float currentScale) {\\n#ifdef VV_SIZE\\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE], currentScale);\\n#else\\nreturn in_size;\\n#endif\\n}\\nmat3 getRotation() {\\n#ifdef VV_ROTATION\\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\\n#else\\nreturn mat3(1.0);\\n#endif\\n}\\nfloat getFilterFlags() {\\n#ifdef IGNORES_SAMPLER_PRECISION\\nreturn ceil(getFilterData(a_id).x * 255.0);\\n#else\\nreturn getFilterData(a_id).x * 255.0;\\n#endif\\n}\\nvec4 getAnimationState() {\\nreturn getAnimation(a_id);\\n}\\nfloat getMinZoom() {\\nvec4 data0 = getFilterData(a_id) * 255.0;\\nreturn data0.g;\\n}\\nmat3 getMatrixNoDisplay(float isMapAligned) {\\nreturn isMapAligned * viewMat3 * tileMat3 + (1.0 - isMapAligned) * tileMat3;\\n}\\nmat3 getMatrix(float isMapAligned) {\\nreturn isMapAligned * displayViewMat3 + (1.0 - isMapAligned) * displayMat3;\\n}\\nfloat checkHighlightBit(float filterFlags, int index) {\\nreturn getHighlightBit(filterFlags, index) * getBit(activeReasons, index);\\n}\\nfloat checkHighlight(float filterFlags) {\\nfloat result = checkHighlightBit(filterFlags, 0);\\nfor (int i = 1; i < maxHighlightReasons; i++) {\\nresult = result + checkHighlightBit(filterFlags, i);\\n}\\nreturn step(0.1, result + highlightAll);\\n}\\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\\n#ifdef inside\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\\n#elif defined(outside)\\npos.z += 2.0 * getFilterBit(filterFlags, 1);\\n#elif defined(highlight)\\npos.z += 2.0 * (1.0 - checkHighlight(filterFlags));\\n#endif\\npos.z += 2.0 * (step(minMaxZoom.y, currentZoom) + (1.0 - step(minMaxZoom.x, currentZoom)));\\nreturn pos;\\n}\",\"vv.glsl\":\"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\\n#define VV_SIZE\\n#endif\\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\\n#define VV\\n#endif\\n#ifdef VV_COLOR\\nuniform highp float colorValues[8];\\nuniform vec4 colors[8];\\n#endif\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nuniform highp vec4 minMaxValueAndSize;\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nuniform highp float unitMeterRatio;\\n#endif\\n#ifdef VV_OPACITY\\nuniform highp float opacityValues[8];\\nuniform float opacities[8];\\n#endif\\n#ifdef VV_ROTATION\\nuniform lowp float rotationType;\\n#endif\\nbool isNan(float val) {\\nreturn (val == NAN_MAGIC_NUMBER);\\n}\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nfloat interpolationRatio = (sizeValue  - minMaxValueAndSize.x) / (minMaxValueAndSize.y - minMaxValueAndSize.x);\\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\\nreturn minMaxValueAndSize.z + interpolationRatio * (minMaxValueAndSize.w - minMaxValueAndSize.z);\\n}\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nfloat getVVScaleStopsSize(float currentScale) {\\nfloat outSize;\\nif (currentScale <= values[0]) {\\noutSize = sizes[0];\\n} else {\\nif (currentScale >= values[7]) {\\noutSize = sizes[7];\\n} else {\\nint index;\\nindex = -1;\\nfor (int i = 0; i < 8; i++) {\\nif (values[i] > currentScale) {\\nindex = i;\\nbreak;\\n}\\n}\\nint prevIndex = index - 1;\\nfloat a = currentScale - values[prevIndex];\\nfloat b = values[index] - values[prevIndex];\\noutSize = mix(sizes[prevIndex], sizes[index], a / b);\\n}\\n}\\nreturn outSize;\\n}\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nconst int VV_SIZE_N = 8;\\nfloat getVVStopsSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nif (sizeValue <= values[0]) {\\nreturn sizes[0];\\n}\\nif (sizeValue >= values[VV_SIZE_N - 1]) {\\nreturn sizes[VV_SIZE_N - 1];\\n}\\nfor (int i = 1; i < VV_SIZE_N; ++i) {\\nif (values[i] >= sizeValue) {\\nfloat f = (sizeValue - values[i-1]) / (values[i] - values[i-1]);\\nreturn mix(sizes[i-1], sizes[i], f);\\n}\\n}\\nreturn sizes[VV_SIZE_N - 1];\\n}\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nfloat getVVUnitValue(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nreturn sizeValue * (metersPerSRUnit / unitMeterRatio);\\n}\\n#endif\\n#ifdef VV_OPACITY\\nconst int VV_OPACITY_N = 8;\\nfloat getVVOpacity(float opacityValue) {\\nif (isNan(opacityValue)) {\\nreturn 1.0;\\n}\\nif (opacityValue <= opacityValues[0]) {\\nreturn opacities[0];\\n}\\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\\nif (opacityValues[i] >= opacityValue) {\\nfloat f = (opacityValue - opacityValues[i-1]) / (opacityValues[i] - opacityValues[i-1]);\\nreturn mix(opacities[i-1], opacities[i], f);\\n}\\n}\\nreturn opacities[VV_OPACITY_N - 1];\\n}\\n#endif\\n#ifdef VV_ROTATION\\nmat4 getVVRotation(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat4(1, 0, 0, 0,\\n0, 1, 0, 0,\\n0, 0, 1, 0,\\n0, 0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat4(cosA, sinA, 0, 0,\\n-sinA,  cosA, 0, 0,\\n0,     0, 1, 0,\\n0,     0, 0, 1);\\n}\\nmat3 getVVRotationMat3(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat3(1, 0, 0,\\n0, 1, 0,\\n0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * -rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat3(cosA, -sinA, 0,\\nsinA, cosA, 0,\\n0,    0,    1);\\n}\\n#endif\\n#ifdef VV_COLOR\\nconst int VV_COLOR_N = 8;\\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\\nif (isNan(colorValue) || isColorLocked == 1.0) {\\nreturn fallback;\\n}\\nif (colorValue <= colorValues[0]) {\\nreturn colors[0];\\n}\\nfor (int i = 1; i < VV_COLOR_N; ++i) {\\nif (colorValues[i] >= colorValue) {\\nfloat f = (colorValue - colorValues[i-1]) / (colorValues[i] - colorValues[i-1]);\\nreturn mix(colors[i-1], colors[i], f);\\n}\\n}\\nreturn colors[VV_COLOR_N - 1];\\n}\\n#endif\\nfloat getVVSize(in float size, in float vvSize, in float currentScale)  {\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nreturn getVVMinMaxSize(vvSize, size);\\n#elif defined(VV_SIZE_SCALE_STOPS)\\nfloat outSize = getVVScaleStopsSize(currentScale);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_FIELD_STOPS)\\nfloat outSize = getVVStopsSize(vvSize, size);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_UNIT_VALUE)\\nreturn getVVUnitValue(vvSize, size);\\n#else\\nreturn size;\\n#endif\\n}\"},\"post-processing\":{blit:{\"blit.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_FragColor = texture2D(u_texture, v_uv);\\n}\"},bloom:{composite:{\"composite.frag\":\"precision mediump float;\\nvarying vec2 v_uv;\\nuniform sampler2D u_blurTexture1;\\nuniform sampler2D u_blurTexture2;\\nuniform sampler2D u_blurTexture3;\\nuniform sampler2D u_blurTexture4;\\nuniform sampler2D u_blurTexture5;\\nuniform float u_bloomStrength;\\nuniform float u_bloomRadius;\\nuniform float u_bloomFactors[NUMMIPS];\\nuniform vec3 u_bloomTintColors[NUMMIPS];\\nfloat lerpBloomFactor(const in float factor) {\\nfloat mirrorFactor = 1.2 - factor;\\nreturn mix(factor, mirrorFactor, u_bloomRadius);\\n}\\nvoid main() {\\nvec4 color = u_bloomStrength * (\\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\\n);\\ngl_FragColor = clamp(color, 0.0, 1.0);\\n}\"},gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\n#define SIGMA RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = float(SIGMA);\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},luminosityHighPass:{\"luminosityHighPass.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nuniform vec3 u_defaultColor;\\nuniform float u_defaultOpacity;\\nuniform float u_luminosityThreshold;\\nuniform float u_smoothWidth;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 texel = texture2D(u_texture, v_uv);\\nvec3 luma = vec3(0.299, 0.587, 0.114);\\nfloat v = dot(texel.xyz, luma);\\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\\ngl_FragColor = mix(outputColor, texel, alpha);\\n}\"}},blur:{gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nuniform float u_sigma;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = u_sigma;\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},\"radial-blur\":{\"radial-blur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nconst float sampleDist = 1.0;\\nconst float sampleStrength = 2.2;\\nvoid main(void) {\\nfloat samples[10];\\nsamples[0] = -0.08;\\nsamples[1] = -0.05;\\nsamples[2] = -0.03;\\nsamples[3] = -0.02;\\nsamples[4] = -0.01;\\nsamples[5] =  0.01;\\nsamples[6] =  0.02;\\nsamples[7] =  0.03;\\nsamples[8] =  0.05;\\nsamples[9] =  0.08;\\nvec2 dir = 0.5 - v_uv;\\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\\ndir = dir / dist;\\nvec4 color = texture2D(u_colorTexture,v_uv);\\nvec4 sum = color;\\nfor (int i = 0; i < 10; i++) {\\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\\n}\\nsum *= 1.0 / 11.0;\\nfloat t = dist * sampleStrength;\\nt = clamp(t, 0.0, 1.0);\\ngl_FragColor = mix(color, sum, t);\\n}\"}},dra:{\"dra.frag\":\"precision mediump float;\\nuniform sampler2D u_minColor;\\nuniform sampler2D u_maxColor;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\\nvec4 color = texture2D(u_texture, v_uv);\\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\\nvec3 colorUnpremultiply = color.rgb / color.a;\\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\\n}\",\"min-max\":{\"min-max.frag\":\"#extension GL_EXT_draw_buffers : require\\nprecision mediump float;\\n#define CELL_SIZE 2\\nuniform sampler2D u_minTexture;\\nuniform sampler2D u_maxTexture;\\nuniform vec2 u_srcResolution;\\nuniform vec2 u_dstResolution;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\\nvec2 onePixel = vec2(1.0) / u_srcResolution;\\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\\nvec4 minColor = vec4(1.0);\\nvec4 maxColor = vec4(0.0);\\nfor (int y = 0; y < CELL_SIZE; ++y) {\\nfor (int x = 0; x < CELL_SIZE; ++x) {\\nvec2 offset = uv + vec2(x, y) * onePixel;\\nminColor = min(minColor, texture2D(u_minTexture, offset));\\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\\n}\\n}\\ngl_FragData[0] = minColor;\\ngl_FragData[1] = maxColor;\\n}\"}},\"drop-shadow\":{composite:{\"composite.frag\":\"precision mediump float;\\nuniform sampler2D u_layerFBOTexture;\\nuniform sampler2D u_blurTexture;\\nuniform vec4 u_shadowColor;\\nuniform vec2 u_shadowOffset;\\nuniform highp mat3 u_displayViewMat3;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\\n}\"}},\"edge-detect\":{\"frei-chen\":{\"frei-chen.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nvarying vec2 v_uv;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[9];\\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\\nvoid main() {\\nG[0] = g0,\\nG[1] = g1,\\nG[2] = g2,\\nG[3] = g3,\\nG[4] = g4,\\nG[5] = g5,\\nG[6] = g6,\\nG[7] = g7,\\nG[8] = g8;\\nmat3 I;\\nfloat cnv[9];\\nvec3 sample;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 9; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\\n}\"},sobel:{\"sobel.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\\n}\"}},\"edge-enhance\":{\"edge-enhance.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nvec4 color = texture2D(u_colorTexture, v_uv);\\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\\n}\"},filterEffect:{\"filterEffect.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform mat4 u_coefficients;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 color = texture2D(u_colorTexture, v_uv);\\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\\nfloat a = color.a;\\ngl_FragColor = vec4(a * rgbw.rgb, a);\\n}\"},pp:{\"pp.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_uv = (a_position + 1.0) / 2.0;\\n}\"}},raster:{common:{\"common.glsl\":\"uniform sampler2D u_image;\\nuniform int u_bandCount;\\nuniform bool u_flipY;\\nuniform float u_opacity;\\nuniform int u_resampling;\\nuniform vec2 u_srcImageSize;\\n#ifdef APPLY_PROJECTION\\n#include <raster/common/projection.glsl>\\n#endif\\n#ifdef BICUBIC\\n#include <filtering/bicubic.glsl>\\n#endif\\n#ifdef BILINEAR\\n#include <filtering/bilinear.glsl>\\n#endif\\nvec2 getPixelLocation(vec2 coords) {\\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\\n#ifdef APPLY_PROJECTION\\ntargetLocation = projectPixelLocation(targetLocation);\\n#endif\\nreturn targetLocation;\\n}\\nbool isOutside(vec2 coords){\\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\\nreturn true;\\n} else {\\nreturn false;\\n}\\n}\\nvec4 getPixel(vec2 pixelLocation) {\\n#ifdef BICUBIC\\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\\n#elif defined(BILINEAR)\\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\\n#else\\nvec4 color = texture2D(u_image, pixelLocation);\\n#endif\\nreturn color;\\n}\",\"projection.glsl\":\"uniform sampler2D u_transformGrid;\\nuniform vec2 u_transformSpacing;\\nuniform vec2 u_transformGridSize;\\nuniform vec2 u_targetImageSize;\\nvec2 projectPixelLocation(vec2 coords) {\\n#ifdef LOOKUP_PROJECTION\\nvec4 pv = texture2D(u_transformGrid, coords);\\nreturn vec2(pv.r, pv.g);\\n#endif\\nvec2 index_image = floor(coords * u_targetImageSize);\\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\\nvec2 srcLocation;\\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\\nif (pos.s <= pos.t) {\\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\\n} else {\\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\\n}\\nreturn srcLocation;\\n}\"},flow:{\"getFadeOpacity.glsl\":\"uniform float u_decayRate;\\nuniform float u_fadeToZero;\\nfloat getFadeOpacity(float x) {\\nfloat cutOff = mix(0.0, exp(-u_decayRate), u_fadeToZero);\\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\\n}\",\"getFragmentColor.glsl\":\"vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\\nfloat featheringStart = clamp(0.5 - featheringSize / size, 0.0, 0.5);\\nif (dist > featheringStart) {\\ncolor *= 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\\n}\\nreturn color;\\n}\",imagery:{\"imagery.frag\":\"precision highp float;\\nvarying vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform float u_Min;\\nuniform float u_Max;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nfloat getIntensity(float v) {\\nreturn u_Min + v * (u_Max - u_Min);\\n}\\nvoid main(void) {\\nvec4 sampled = texture2D(u_texture, v_texcoord);\\nfloat intensity = getIntensity(sampled.r);\\ngl_FragColor = getColor(intensity);\\ngl_FragColor.a *= getOpacity(sampled.r);\\ngl_FragColor.a *= sampled.a;\\ngl_FragColor.rgb *= gl_FragColor.a;\\n}\",\"imagery.vert\":\"attribute vec2 a_position;\\nattribute vec2 a_texcoord;\\nuniform mat3 u_dvsMat3;\\nvarying vec2 v_texcoord;\\nvoid main(void) {\\nvec2 xy = (u_dvsMat3 * vec3(a_position, 1.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},particles:{\"particles.frag\":\"precision highp float;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/getFragmentColor.glsl>\\nvoid main(void) {\\ngl_FragColor = getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\\n}\",\"particles.vert\":\"attribute vec4 a_xyts0;\\nattribute vec4 a_xyts1;\\nattribute vec4 a_typeIdDurationSeed;\\nattribute vec4 a_extrudeInfo;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/vv.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nvec2 position0 = a_xyts0.xy;\\nfloat t0 = a_xyts0.z;\\nfloat speed0 = a_xyts0.w;\\nvec2 position1 = a_xyts1.xy;\\nfloat t1 = a_xyts1.z;\\nfloat speed1 = a_xyts1.w;\\nfloat type = a_typeIdDurationSeed.x;\\nfloat id = a_typeIdDurationSeed.y;\\nfloat duration = a_typeIdDurationSeed.z;\\nfloat seed = a_typeIdDurationSeed.w;\\nvec2 e0 = a_extrudeInfo.xy;\\nvec2 e1 = a_extrudeInfo.zw;\\nfloat animationPeriod = duration + u_trailLength;\\nfloat scaledTime = u_time * u_flowSpeed;\\nfloat randomizedTime = scaledTime + seed * animationPeriod;\\nfloat t = mod(randomizedTime, animationPeriod);\\nfloat fUnclamped = (t - t0) / (t1 - t0);\\nfloat f = clamp(fUnclamped, 0.0, 1.0);\\nfloat clampedTime = mix(t0, t1, f);\\nfloat speed = mix(speed0, speed1, f);\\nvec2 extrude;\\nvec2 position;\\nfloat fadeOpacity;\\nfloat introOpacity;\\nif (type == 2.0) {\\nif (fUnclamped < 0.0 || (fUnclamped > 1.0 && t1 != duration)) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nvec2 ortho = mix(e0, e1, f);\\nvec2 parallel;\\nparallel = normalize(position1 - position0) * 0.5;\\nif (id == 1.0) {\\nextrude = ortho;\\nv_texcoord = vec2(0.5, 0.0);\\n} else if (id == 2.0) {\\nextrude = -ortho;\\nv_texcoord = vec2(0.5, 1.0);\\n} else if (id == 3.0) {\\nextrude = ortho + parallel;\\nv_texcoord = vec2(1.0, 0.0);\\n} else if (id == 4.0) {\\nextrude = -ortho + parallel;\\nv_texcoord = vec2(1.0, 1.0);\\n}\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else {\\nif (fUnclamped < 0.0) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nif (id == 1.0) {\\nextrude = e0;\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 2.0) {\\nextrude = -e0;\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 3.0) {\\nextrude = mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else if (id == 4.0) {\\nextrude = -mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n}\\n}\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_color.a *= fadeOpacity;\\nv_color.a *= mix(1.0, introOpacity, u_introFade);\\nv_color.rgb *= v_color.a;\\n}\"},streamlines:{\"streamlines.frag\":\"precision highp float;\\nvarying float v_side;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_size;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/getFragmentColor.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nfloat t = mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\\nvec4 color = v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\\ncolor *= mix(1.0, 1.0 - exp(-v_time), u_introFade);\\ngl_FragColor = getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\\n}\",\"streamlines.vert\":\"attribute vec3 a_positionAndSide;\\nattribute vec3 a_timeInfo;\\nattribute vec2 a_extrude;\\nattribute float a_speed;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_side;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nvoid main(void) {\\nvec4 lineColor = getColor(a_speed);\\nfloat lineOpacity = getOpacity(a_speed);\\nfloat lineSize = getSize(a_speed);\\nvec2 position = a_positionAndSide.xy;\\nv_side = a_positionAndSide.z;\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_time = a_timeInfo.x;\\nv_totalTime = a_timeInfo.y;\\nv_timeSeed = a_timeInfo.z;\\nv_color = lineColor;\\nv_color.a *= lineOpacity;\\nv_color.rgb *= v_color.a;\\nv_size = lineSize;\\n}\"},\"vv.glsl\":\"#define MAX_STOPS 8\\n#ifdef VV_COLOR\\nuniform float u_color_stops[MAX_STOPS];\\nuniform vec4 u_color_values[MAX_STOPS];\\nuniform int u_color_count;\\n#else\\nuniform vec4 u_color;\\n#endif\\n#ifdef VV_OPACITY\\nuniform float u_opacity_stops[MAX_STOPS];\\nuniform float u_opacity_values[MAX_STOPS];\\nuniform int u_opacity_count;\\n#else\\nuniform float u_opacity;\\n#endif\\n#ifdef VV_SIZE\\nuniform float u_size_stops[MAX_STOPS];\\nuniform float u_size_values[MAX_STOPS];\\nuniform int u_size_count;\\n#else\\nuniform float u_size;\\n#endif\\nuniform float u_featheringOffset;\\nvec4 getColor(float x) {\\n#ifdef VV_COLOR\\nvec4 color = u_color_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_color_count) {\\nbreak;\\n}\\nfloat x1 = u_color_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_color_stops[i];\\nvec4 y2 = u_color_values[i];\\nif (x < x2) {\\nvec4 y1 = u_color_values[i - 1];\\ncolor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\ncolor = y2;\\n}\\n}\\n}\\n#else\\nvec4 color = u_color;\\n#endif\\nreturn color;\\n}\\nfloat getOpacity(float x) {\\n#ifdef VV_OPACITY\\nfloat opacity = u_opacity_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_opacity_count) {\\nbreak;\\n}\\nfloat x1 = u_opacity_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_opacity_stops[i];\\nfloat y2 = u_opacity_values[i];\\nif (x < x2) {\\nfloat y1 = u_opacity_values[i - 1];\\nopacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nopacity = y2;\\n}\\n}\\n}\\n#else\\nfloat opacity = u_opacity;\\n#endif\\nreturn opacity;\\n}\\nfloat getSize(float x) {\\n#ifdef VV_SIZE\\nfloat size = u_size_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_size_count) {\\nbreak;\\n}\\nfloat x1 = u_size_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_size_stops[i];\\nfloat y2 = u_size_values[i];\\nif (x < x2) {\\nfloat y1 = u_size_values[i - 1];\\nsize = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nsize = y2;\\n}\\n}\\n}\\n#else\\nfloat size = u_size;\\n#endif\\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\\n}\"},magdir:{\"magdir.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nuniform lowp float u_opacity;\\nvoid main() {\\ngl_FragColor = v_color * u_opacity;\\n}\",\"magdir.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nuniform float u_rotation;\\nuniform vec4 u_colors[12];\\nvarying vec4 v_color;\\nvoid main()\\n{\\nfloat angle = a_offset.y + u_rotation;\\n#ifndef ROTATION_GEOGRAPHIC\\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\\n#endif\\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\\nv_color = u_colors[int(a_vv.x)];\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},reproject:{\"reproject.frag\":\"precision mediump float;\\nvarying vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\n}\",\"reproject.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_position;\\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\\n}\"},scalar:{\"scalar.frag\":\"precision mediump float;\\nuniform lowp float u_opacity;\\nvarying vec2 v_pos;\\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\\nconst float outlineSize = 0.02;\\nconst float innerRadius = 0.25;\\nconst float outerRadius = 0.42;\\nconst float innerSquareLength = 0.15;\\nvoid main() {\\nmediump float dist = length(v_pos);\\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\\n#ifdef INNER_CIRCLE\\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\\n#else\\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\\n#endif\\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\\n}\",\"scalar.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nvarying vec2 v_pos;\\nvoid main()\\n{\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 size = u_symbolSize * sizePercentage;\\nvec2 pos = a_pos + a_offset * size;\\nv_pos = a_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"}},stencil:{\"stencil.frag\":\"void main() {\\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n}\",\"stencil.vert\":\"attribute vec2 a_pos;\\nuniform mat3 u_worldExtent;\\nvoid main() {\\ngl_Position = vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\\n}\"},test:{\"TestShader.common.glsl\":\"#ifndef RETURN_RED\\nvarying    vec4      v_color;\\n#endif\\nvarying    vec2      v_offset;\",\"TestShader.frag\":\"precision highp float;\\n#include <test/TestShader.common.glsl>\\nvoid main() {\\nif (v_offset.x > -.5 && v_offset.y > -.5 && v_offset.x < .5 && v_offset.y < .5) {\\ndiscard;\\n}\\n#ifdef RETURN_RED\\ngl_FragColor = vec4(1., 0., 0., 1.);\\n#else\\ngl_FragColor = v_color;\\n#endif\\n}\",\"TestShader.vert\":\"const float POS_PRECISION_FACTOR = 10.;\\nconst float OFFSET_PRECISION_FACTOR = 10.;\\nconst float SIZE_PRECISION_FACTOR = 10.;\\nattribute  vec2      a_pos_packed;\\nattribute  vec2      a_offset_packed;\\nattribute  float     a_size_packed;\\n#ifdef DATA_DRIVEN_COLOR\\nconst float u_dataDrivenColor_validValues[4] = float[4](0., 0., 1., 0.);\\nuniform    vec4      u_dataDrivenColor_colorFallback;\\nuniform    vec4      u_dataDrivenColor_color;\\n#endif\\nuniform    float     u_view_zoomLevel;\\n#include <test/TestShader.common.glsl>\\n#ifdef DATA_DRIVEN_COLOR\\nvec4 getColor(float value) {\\nint index = -1;\\nfor (int i = 0; i < 4; i++) {\\nif (u_dataDrivenColor_validValues[i] == value) {\\nindex = i;\\nbreak;\\n}\\n}\\nif (index == -1) {\\nreturn u_dataDrivenColor_colorFallback;\\n}\\nreturn u_dataDrivenColor_color;\\n}\\n#endif\\nvoid main() {\\nvec2  a_pos = a_pos_packed / POS_PRECISION_FACTOR;\\nvec2  a_offset = a_offset_packed / OFFSET_PRECISION_FACTOR;\\nfloat a_size = a_size_packed / SIZE_PRECISION_FACTOR;\\nvec4 color = vec4(1., 0., 0., 1.);\\n#ifdef DATA_DRIVEN_COLOR\\ncolor = getColor(1.);\\n#endif\\nvec2 offsetScaled = a_offset * a_size;\\nvec4 pos = vec4(a_pos.xy + offsetScaled, 0., 1.);\\ngl_Position = pos;\\n#ifndef RETURN_RED\\nv_color = color;\\n#endif\\nv_offset = a_offset;\\n}\"},tileInfo:{\"tileInfo.frag\":\"uniform mediump sampler2D u_texture;\\nvarying mediump vec2 v_tex;\\nvoid main(void) {\\nlowp vec4 color = texture2D(u_texture, v_tex);\\ncolor.rgb *= color.a;\\ngl_FragColor = color;\\n}\",\"tileInfo.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump float u_depth;\\nuniform mediump vec2 u_coord_ratio;\\nuniform mediump vec2 u_delta;\\nuniform mediump vec2 u_dimensions;\\nvarying mediump vec2 v_tex;\\nvoid main() {\\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\nv_tex = a_pos;\\n}\"},util:{\"atan2.glsl\":\"float atan2(in float y, in float x) {\\nfloat t0, t1, t2, t3, t4;\\nt3 = abs(x);\\nt1 = abs(y);\\nt0 = max(t3, t1);\\nt1 = min(t3, t1);\\nt3 = 1.0 / t0;\\nt3 = t1 * t3;\\nt4 = t3 * t3;\\nt0 =         - 0.013480470;\\nt0 = t0 * t4 + 0.057477314;\\nt0 = t0 * t4 - 0.121239071;\\nt0 = t0 * t4 + 0.195635925;\\nt0 = t0 * t4 - 0.332994597;\\nt0 = t0 * t4 + 0.999995630;\\nt3 = t0 * t3;\\nt3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\\nt3 = x < 0.0 ?  3.141592654 - t3 : t3;\\nt3 = y < 0.0 ? -t3 : t3;\\nreturn t3;\\n}\",\"encoding.glsl\":\"const vec4 rgba2float_factors = vec4(\\n255.0 / (256.0),\\n255.0 / (256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n);\\nfloat rgba2float(vec4 rgba) {\\nreturn dot(rgba, rgba2float_factors);\\n}\"}};export{e as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import r from\"../../../../core/Logger.js\";import{e as t}from\"../../../../chunks/earcut.js\";import{set as o}from\"../../../../core/libs/gl-matrix-2/math/vec2.js\";import{create as n}from\"../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{convertFromNestedArray as s,convertFromPolygon as i}from\"../../../../layers/graphics/featureConversionUtils.js\";import c from\"../../../../layers/graphics/OptimizedGeometry.js\";import{i1616to32 as a}from\"./number.js\";import{BufferObject as f}from\"../../../webgl/BufferObject.js\";import{PrimitiveType as m,Usage as h}from\"../../../webgl/enums.js\";const l=(e,r,t,o)=>{let n=0;for(let s=1;s<t;s++){const t=e[2*(r+s-1)],o=e[2*(r+s-1)+1];n+=(e[2*(r+s)]-t)*(e[2*(r+s)+1]+o)}return o?n>0:n<0},u=({coords:e,lengths:r},o)=>{const n=[];for(let s=0,i=0;s<r.length;i+=r[s],s+=1){const c=i,a=[];for(;s<r.length-1&&l(e,i+r[s],r[s+1],o);s+=1,i+=r[s])a.push(i+r[s]-c);const f=e.slice(2*c,2*(i+r[s])),m=t(f,a,2);for(const e of m)n.push(e+c)}return n};class y{constructor(e,r,t,o=!1){this._cache={},this.vertices=e,this.indices=r,this.primitiveType=t,this.isMapSpace=o}static fromPath(e){const r=s(new c,e.path,!1,!1),t=r.coords,o=new Uint32Array(u(r,!0)),n=new Uint32Array(t.length/2);for(let s=0;s<n.length;s++)n[s]=a(Math.floor(t[2*s]),Math.floor(t[2*s+1]));return new y({geometry:n},o,m.TRIANGLES)}static fromGeometry(t,o){const n=o.geometry?.type;switch(n){case\"polygon\":return y.fromPolygon(t,o.geometry);case\"extent\":return y.fromMapExtent(t,o.geometry);default:return r.getLogger(\"esri.views.2d.engine.webgl.Mesh2D\").error(new e(\"mapview-bad-type\",`Unable to create a mesh from type ${n}`,o)),y.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}static fromPolygon(e,r){const t=i(new c,r,!1,!1),s=t.coords,f=new Uint32Array(u(t,!1)),h=new Uint32Array(s.length/2),l=n(),x=n();for(let n=0;n<h.length;n++)o(l,s[2*n],s[2*n+1]),e.toScreen(x,l),h[n]=a(Math.floor(x[0]),Math.floor(x[1]));return new y({geometry:h},f,m.TRIANGLES,!0)}static fromScreenExtent({xmin:e,xmax:r,ymin:t,ymax:o}){const n={geometry:new Uint32Array([a(e,t),a(r,t),a(e,o),a(e,o),a(r,t),a(r,o)])},s=new Uint32Array([0,1,2,3,4,5]);return new y(n,s,m.TRIANGLES)}static fromMapExtent(e,r){const[t,o]=e.toScreen([0,0],[r.xmin,r.ymin]),[n,s]=e.toScreen([0,0],[r.xmax,r.ymax]),i={geometry:new Uint32Array([a(t,o),a(n,o),a(t,s),a(t,s),a(n,o),a(n,s)])},c=new Uint32Array([0,1,2,3,4,5]);return new y(i,c,m.TRIANGLES)}destroy(){null!=this._cache.indexBuffer&&this._cache.indexBuffer.dispose(),this._cache.vertexBuffers?.forEach((e=>e?.dispose())),this._cache.indexBuffer=this._cache.vertexBuffers=null}getIndexBuffer(e,r=h.STATIC_DRAW){return this._cache.indexBuffer??=f.createIndex(e,r,this.indices),this._cache.indexBuffer}getVertexBuffers(e,r=h.STATIC_DRAW){return this._cache.vertexBuffers??=new Map(Object.keys(this.vertices).reduce(((t,o)=>(t.push([o,f.createVertex(e,r,this.vertices[o])]),t)),new Array)),this._cache.vertexBuffers}}export{y as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import t from\"../../../../core/Logger.js\";import{watch as r}from\"../../../../core/reactiveUtils.js\";import{create as s}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{DisplayObject as i}from\"../DisplayObject.js\";import a from\"./Mesh2D.js\";import{createScreenExtent as o}from\"../../support/clippingUtils.js\";import{VertexArrayObject as h}from\"../../../webgl/VertexArrayObject.js\";class c extends i{constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=r((()=>t.version),(()=>this._invalidate())),this.ready()}static fromClipArea(e,t){return new c(e,t)}_destroyGL(){null!=this._cache.mesh&&(this._cache.mesh.destroy(),this._cache.mesh=null),null!=this._cache.vao&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,r,s){const[i,a]=t.size;if(\"geometry\"!==this._clip.type&&this._lastWidth===i&&this._lastHeight===a||(this._lastWidth=i,this._lastHeight=a,this._destroyGL()),null==this._cache.vao){const i=this._createMesh(t,this._clip),a=i.getIndexBuffer(e),o=i.getVertexBuffers(e);this._cache.mesh=i,this._cache.vao=new h(e,r,s,o,a)}return this._cache.vao}_createTransforms(){return{displayViewScreenMat3:s()}}_invalidate(){this._destroyGL(),this.requestRender()}_createMesh(r,s){switch(s.type){case\"rect\":return a.fromScreenExtent(o(s,r.size[0],r.size[1]));case\"path\":return a.fromPath(s);case\"geometry\":return a.fromGeometry(r,s);default:return t.getLogger(\"esri.views.2d.engine.webgl.ClippingInfo\").error(new e(\"mapview-bad-type\",\"Unable to create ClippingInfo mesh from clip of type: ${clip.type}\")),a.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}}export{c as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{brushes as s}from\"../brushes.js\";import{Container as e}from\"../Container.js\";import r from\"./ClippingInfo.js\";import{WGLDrawPhase as i}from\"./enums.js\";class n extends e{set clips(s){super.clips=s,this._updateClippingInfo(s)}renderChildren(s){s.painter.setPipelineState(null),null==this._renderPasses&&(this._renderPasses=this.prepareRenderPasses(s.painter));for(const r of this._renderPasses)try{r.render(s)}catch(e){}}prepareRenderPasses(e){return[e.registerRenderPass({name:\"clip\",brushes:[s.clip],target:()=>this._clippingInfos,drawPhase:i.MAP|i.LABEL|i.LABEL_ALPHA|i.DEBUG|i.HIGHLIGHT})]}_updateClippingInfo(s){null!=this._clippingInfos&&(this._clippingInfos.forEach((s=>s.destroy())),this._clippingInfos=null),null!=s&&s.length&&(this._clippingInfos=s.items.map((s=>r.fromClipArea(this.stage,s)))),this.requestRender()}}export{n as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as t}from\"../DefaultVertexAttributeLayouts.js\";import{FeatureTile as r}from\"../FeatureTile.js\";import o from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{tileInfo as s}from\"../shaders/TileInfoPrograms.js\";import{BufferObject as n}from\"../../../../webgl/BufferObject.js\";import{BlendFactor as a,PrimitiveType as l,Usage as f,TextureWrapMode as m,TextureSamplingMode as u}from\"../../../../webgl/enums.js\";import{createProgram as c}from\"../../../../webgl/ProgramTemplate.js\";import{Texture as d}from\"../../../../webgl/Texture.js\";import{TextureDescriptor as h}from\"../../../../webgl/TextureDescriptor.js\";import{VertexArrayObject as g}from\"../../../../webgl/VertexArrayObject.js\";const _=512,x=512,b=16,p=8,T=(x-2*p)/5;class y extends o{constructor(){super(...arguments),this._color=e(1,0,0,1)}dispose(){this._outlineProgram?.dispose(),this._outlineProgram=null,this._tileInfoProgram?.dispose(),this._tileInfoProgram=null,this._outlineVertexArrayObject?.dispose(),this._outlineVertexArrayObject=null,this._tileInfoVertexArrayObject?.dispose(),this._tileInfoVertexArrayObject=null,this._ctx=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){const{context:o,requestRender:i,allowDelayedRender:s}=e;if(!t.isReady&&t instanceof r&&t.hasData)return;if(this._loadWGLResources(o),s&&null!=i&&(!this._outlineProgram.compiled||!this._tileInfoProgram.compiled))return void i();o.bindVAO(this._outlineVertexArrayObject),o.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._outlineProgram.setUniform2f(\"u_coord_range\",t.rangeX,t.rangeY),this._outlineProgram.setUniform1f(\"u_depth\",0),this._outlineProgram.setUniform4fv(\"u_color\",this._color),o.drawArrays(l.LINE_STRIP,0,4);const n=this._getTexture(o,t);n?(o.bindVAO(this._tileInfoVertexArrayObject),o.useProgram(this._tileInfoProgram),o.bindTexture(n,0),this._tileInfoProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._tileInfoProgram.setUniform1f(\"u_depth\",0),this._tileInfoProgram.setUniform2f(\"u_coord_ratio\",t.rangeX/t.width,t.rangeY/t.height),this._tileInfoProgram.setUniform2f(\"u_delta\",0,0),this._tileInfoProgram.setUniform2f(\"u_dimensions\",n.descriptor.width,n.descriptor.height),o.drawArrays(l.TRIANGLE_STRIP,0,4),o.bindVAO()):o.bindVAO()}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const r=c(e,i),o=c(e,s),a=new Int8Array([0,0,1,0,1,1,0,1]),l=n.createVertex(e,f.STATIC_DRAW,a),m=new g(e,i.attributes,t,new Map([[\"geometry\",l]])),u=new Int8Array([0,0,1,0,0,1,1,1]),d=n.createVertex(e,f.STATIC_DRAW,u),h=new g(e,s.attributes,t,new Map([[\"geometry\",d]]));this._outlineProgram=r,this._tileInfoProgram=o,this._outlineVertexArrayObject=m,this._tileInfoVertexArrayObject=h}_getTexture(e,t){if(!this._ctx){const e=document.createElement(\"canvas\");e.width=_,e.height=x,this._ctx=e.getContext(\"2d\")}if(!t.tileDebugInfoTexture){const r=new h;r.wrapMode=m.CLAMP_TO_EDGE,r.samplingMode=u.LINEAR,r.isImmutable=!0,r.width=_,r.height=x,t.tileDebugInfoTexture=new d(e,r)}const r=this._ctx;r.clearRect(0,0,r.canvas.width,r.canvas.height),r.textAlign=\"left\",r.textBaseline=\"top\",r.font=b-2+\"px sans-serif\",r.lineWidth=2,r.fillStyle=\"white\",r.strokeStyle=\"black\";const{debugSlot:o}=t;let i=p+T*o;const s=`${o}) ${t.key.id} (${t.constructor.name})`;r.strokeText(s,p,i),r.fillText(s,p,i),i+=b;const{debugInfo:n}=t;if(n){const{length:e,minOrderedLength:t,minUnorderedLength:o,triangleCount:s}=n.display;if(e>0){const t=`Length: ${e}`;r.strokeText(t,p,i),r.fillText(t,p,i),i+=b}if(t){const e=`Min ordered length: ${t}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(o){const e=`Min unordered length: ${o}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(s>0){s>1e5&&(r.fillStyle=\"red\",r.strokeStyle=\"white\");const e=`Triangle count: ${s}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}const{bytesUsed:a,bytesReserved:l}=n.memory;if(r.fillStyle=\"white\",r.strokeStyle=\"black\",a>0||l>0){const e=`Memory usage: ${a} of ${l} bytes`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}}return t.tileDebugInfoTexture.setData(r.canvas),t.tileDebugInfoTexture}}export{y as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nclass t{constructor(a){if(this.next=null,!Array.isArray(a))return void(this.data=a);this.data=a[0];let e=this;for(let n=1;n<a.length;n++)e.next=new t([a[n]]),e=e.next}*values(){let t=this;for(;t;)yield t.data,t=t.next}forEach(t){let a=this;for(;a;)t(a.data),a=a.next}get last(){return this.next?this.next.last:this}}class a{constructor(a){this._head=null,null!=a&&(this._head=new t(a))}get head(){return this._head}maxAvailableSpace(){if(null==this._head)return 0;let t=0;return this._head.forEach((a=>{const e=a.end-a.start;t=Math.max(t,e)})),t}firstFit(t){if(null==this._head)return null;let a=null,e=this._head;for(;e;){const n=e.data.end-e.data.start;if(n===t)return a?a.next=e.next:this._head=e.next,e.data.start;if(n>t){const a=e.data.start;return e.data.start+=t,a}a=e,e=e.next}return null}free(a,e){const n=a+e;if(null==this._head){const e=new t({start:a,end:n});return void(this._head=e)}if(n<=this._head.data.start){if(n===this._head.data.start)return void(this._head.data.start-=e);const r=new t({start:a,end:n});return r.next=this._head,void(this._head=r)}let r=this._head,d=r.next;for(;d;){if(d.data.start>=n){if(r.data.end===a){if(r.data.end+=e,r.data.end===d.data.start){const t=d.data.end-d.data.start;return r.data.end+=t,void(r.next=d.next)}return}if(d.data.start===n)return void(d.data.start-=e);const s=new t({start:a,end:n});return s.next=r.next,void(r.next=s)}r=d,d=d.next}if(a===r.data.end)return void(r.data.end+=e);const s=new t({start:a,end:n});r.next=s}clear(){this._head=null}}export{a as FreeList,t as List};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as r}from\"./sources/resolver.js\";const e={shaders:{vertexShader:r(\"background/background.vert\"),fragmentShader:r(\"background/background.frag\")},attributes:new Map([[\"a_pos\",0]])};export{e as background};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{FeatureBatchingStrategy as t,FeatureSymbologyDrawOrder as e}from\"./enums.js\";import{List as n}from\"./cpuMapped/FreeList.js\";import{isHittest as i}from\"./shaderGraph/techniques/featureTechniqueUtils.js\";import{PrimitiveType as a,DataType as s}from\"../../../webgl/enums.js\";function r(t,e){return t<<16|255&e}function d(t){return 255&t}class h{constructor(t,e,n,i,a){this.instance=t,this.materialKey=e,this.target=n,this.start=i,this.count=a}get textureKey(){return d(this.materialKey)}get indexEnd(){return this.start+this.count}extend(t){this.count+=t}render(t){this.instance.techniqueRef.render(t,this)}get key(){return this.target.key}getStencilReference(){return this.target.stencilRef}getAttributePrecisionPackFactors(){const t=this.instance.instanceId;return this.target.getMesh(t).getAttributePrecisionPackFactors()}draw(t,e){i(t)?this.drawCompute(t.context,e):this.drawGeometry(t.context,e)}drawCompute(t,e){const n=this.instance.instanceId,i=this.target.getMesh(n).getComputeVAO(t,e),r=this.start*Uint32Array.BYTES_PER_ELEMENT/3;t.bindVAO(i),t.drawElements(a.POINTS,this.count/3,s.UNSIGNED_INT,r),t.bindVAO(null)}drawGeometry(t,e){const n=this.instance.instanceId,i=this.target.getMesh(n).getGeometryVAO(t,e),r=this.start*Uint32Array.BYTES_PER_ELEMENT;t.bindVAO(i),t.drawElements(a.TRIANGLES,this.count,s.UNSIGNED_INT,r),t.bindVAO(null)}}class l{constructor(){this._length=0,this._minOrderedLength=0,this._materialKeys=new Set}static fromDisplayEntities(t,e,n,i){const a=new l;for(const s of t.values())for(const t of s.records){const s=n.getInstance(t.instanceId),d=r(s.instanceId,t.textureKey);a.addRecord(s,d,t.indexStart,t.indexCount,t.vertexStart,t.vertexCount,e,i)}return a}get length(){return this._length}get minOrderedLength(){return this._minOrderedLength}get minUnorderedLength(){return this._materialKeys.size}render(t,e){const{drawPhase:n}=t;for(const i of this.infos()){const a=i.instance.techniqueRef;a.drawPhase&n&&(null==e||a.type===e)&&i.render(t)}}addRecord(i,a,s,r,d,l,o,c){let u=s,_=r;if(_||(u=d,_=l),!_)return;if(null==this._head){const t=new h(i,a,o,u,_);return this._head=new n(t),this._tail=this._head,this._length++,void this._minOrderedLength++}if(c===t.STRICT_ORDER)return this._insert(i,a,o,u,_,this._tail,null);let g=null,m=this._head;const f=i.instanceId,y=i.techniqueRef.symbologyPlane;if(c===t.STRICT_MARKERS_AND_TEXT&&(y===e.MARKER||y===e.TEXT))return this._insert(i,a,o,u,_,this._tail,null);for(;m;){const t=m.data.instance,e=t.instanceId,n=t.techniqueRef.symbologyPlane,s=g?.data.instance.instanceId;if(y<n||f===s&&f!==e)return this._insert(i,a,o,u,_,g,m);g=m,m=m.next}this._insert(i,a,o,u,_,g,null)}*infos(){if(null!=this._head)for(const t of this._head.values())yield t}_insert(t,e,i,a,s,r,d){if(null==r&&null==d){const r=new h(t,e,i,a,s);return this._head=new n(r),this._tail=this._head,this._length++,void this._minOrderedLength++}return e!==this._tail.data.materialKey&&this._minOrderedLength++,this._materialKeys.add(e),null==r&&null!=d?this._insertAtHead(t,e,i,a,s,d):null!=r&&null==d?this._insertAtEnd(t,e,i,a,s,r):null!=r&&null!=d?this._insertAtMiddle(t,e,i,a,s,r,d):void 0}_insertAtHead(t,e,i,a,s,r){const d=a+s;if(e===r.data.materialKey&&i===r.data.target&&d===r.data.start)r.data.start=a,r.data.count+=s;else{const d=new h(t,e,i,a,s);this._head=new n(d),this._head.next=r,this._length++}}_insertAtEnd(t,e,i,a,s,r){if(r.data.materialKey===e&&r.data.indexEnd===a)r.data.count+=s;else{const d=new h(t,e,i,a,s);this._tail=new n(d),r.next=this._tail,this._length++}}_insertAtMiddle(t,e,i,a,s,r,d){const l=a+s;if(r.data.materialKey===e&&r.data.target===i&&r.data.indexEnd===a)r.data.count+=s,r.data.materialKey===d.data.materialKey&&r.data.target===d.data.target&&r.data.indexEnd===d.data.start&&(r.data.count+=d.data.count,r.next=d.next,this._length--);else if(e===d.data.materialKey&&i===d.data.target&&l===d.data.start)d.data.start=a,d.data.count+=s;else{const l=new h(t,e,i,a,s),o=new n(l);r.next=o,o.next=d,this._length++}}}export{l as DisplayList,h as DisplayListInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._indexOnly=t,this.vertex={count:0,operations:[]},this.index={count:0,operations:[]}}copyRecord(t){let e=0;this._indexOnly||(e=this.vertex.count-t.vertexStart,this.vertex.operations.push({srcFrom:t.vertexStart,dstFrom:this.vertex.count,count:t.vertexCount,mutate:0}),t.vertexStart=this.vertex.count,this.vertex.count+=t.vertexCount);let n=!1;if(this._indexOnly&&this.index.operations.length>=1){const e=this.index.operations[this.index.operations.length-1];e.srcFrom+e.count===t.indexStart&&(e.count+=t.indexCount,n=!0)}n||this.index.operations.push({srcFrom:t.indexStart,dstFrom:this.index.count,count:t.indexCount,mutate:e}),t.indexStart=this.index.count,this.index.count+=t.indexCount}}export{t as ReshufflePlan};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._pos=0,this._buffer=t,this._i32View=new Int32Array(this._buffer),this._f32View=new Float32Array(this._buffer)}readInt32(){return this._i32View[this._pos++]}readF32(){return this._f32View[this._pos++]}}export{t as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport t from\"../DisplayEntity.js\";import{LabelMetric as e}from\"../collisions/LabelMetric.js\";import{unpackDataView as i}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import r from\"../util/Reader.js\";import{deserializeList as o}from\"../util/serializationUtils.js\";function s(e){if(!e)return null;return{entities:o(new r(e.entities),t),vertexData:e.data.map(a)}}function a(t){const s=t.layout.stride,a=new DataView(t.vertices),n=[],c=t.vertices.byteLength/s;let l=0;for(let e=0;e<c;e++){const e={};for(const r of t.layout.attributes){let t=`${r.offset} ${r.name}`,o=i(a,r,l);if(r.packPrecisionFactor)if(t+=` (precision: ${r.packPrecisionFactor})`,\"number\"==typeof o)o/=r.packPrecisionFactor;else for(let e=0;e<o.length;e++)o[e]/=r.packPrecisionFactor;e[t]=o}l+=s,n.push(e)}const f=t.metrics?o(new r(t.metrics),e)??[]:[];return{vertices:n,layout:t.layout,metrics:f}}export{s as debugMeshDataInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import e from\"../../../../core/Logger.js\";import{create as t}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{create as s}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{AFeatureTile as i}from\"./AFeatureTile.js\";import{RESHUFFLING_EXEMPT_MEMORY_BYTES as r,RESHUFFLING_TARGET_MEMORY_EFFICIENCY as o,RESHUFFLING_EXEMPT_DRAW_CALLS as d,RESHUFFLING_TARGET_DRAW_EFFICIENCY as n,tileSize as h}from\"./definitions.js\";import a from\"./DisplayEntity.js\";import{FeatureBatchingStrategy as l}from\"./enums.js\";import{DisplayList as c}from\"./FeatureDisplayList.js\";import{ReshufflePlan as f}from\"./ReshufflePlan.js\";import{LabelMetric as u}from\"./collisions/LabelMetric.js\";import{MappedMesh as _}from\"./cpuMapped/MappedMesh.js\";import{debugMeshDataInfo as m}from\"./mesh/meshDebugUtils.js\";import p from\"./util/Reader.js\";import{deserializeList as y}from\"./util/serializationUtils.js\";const b=()=>e.getLogger(\"esri.views.2d.engine.webgl.FeatureTile\");let g=0;class I extends i{constructor(e,i,r,o,d,n,h=!1){super(e,i,r,o),this._fader=d,this._labelInstanceId=n,this._meshes=new Map,this._entities=[],this._entityIndex=new Map,this._invalidated=!1,this._nextUploadAllowed=!1,this.tileAge=g++,this._metrics=[],this._metricsVisibility=new Set,this._entityIds=new Set,this._entityIdsFromBuffer=new Set,this._attributeEpoch=0,this._encounteredEnd=!1,this.neededForCoverage=!1,this.isCoverage=!1,this.rendering=!1,this._decluttered=!1,this._objectIdMap=null,this.visible=!0,this.transforms.labelMat2d=t(),this.transforms.tileUnitsToPixels=s(),this.enableDeferredUploads=h}destroy(){super.destroy(),this.clear()}clear(){for(const e of this._meshes.values())e.destroy();this._meshes.clear(),this._entities=[],this._fader?.removeFeatureTileMetrics(this,this._metrics),this._metrics=[],this._displayList=null,this._invalidated=!0,this._entityIds.clear(),this._nextUploadAllowed=!0}beforeRender(e){super.beforeRender(e),this._needsReshuffle&&e.reshuffleManager.schedule(this)}tryReady(e){const t=this._invalidated&&!this._uploadAllowed;return!(this.isReady||t||!this._encounteredEnd||!(e>=this._attributeEpoch))&&(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.ready [epoch=${e}]`),this.ready(),this.requestRender(),this.decluttered=!1,!0)}get symbols(){const e=new Map;for(const t of this._metrics)e.get(t.labelClassId)||e.set(t.labelClassId,[]),e.get(t.labelClassId).push(t);return e}get decluttered(){return this._decluttered}set decluttered(e){this._decluttered=e,this.requestRender()}get id(){return this.key.id}get hasData(){return!!this._meshes.size}get hasAnimations(){return!!this._objectIdMap}get needsUpload(){return this._invalidated}get _uploadAllowed(){return!this.enableDeferredUploads||this._nextUploadAllowed}get _hasMetrics(){return this._metrics.length>0}upload(){this._nextUploadAllowed=!0}getDisplayList(e,t){if(this._uploadAllowed&&this._invalidated){this._entities.sort(((e,t)=>{const s=t.sortKey,i=e.sortKey;return i===s?e.id-t.id:i-s})),t===l.BATCHING&&this.reshuffle(!0),this._displayList=c.fromDisplayEntities(this._entities,this,e,t);for(const e of this._meshes.values())e.upload();this.debugInfo.display.length=this._displayList.length,this.debugInfo.display.minOrderedLength=this._displayList.minOrderedLength,this.debugInfo.display.minUnorderedLength=this._displayList.minUnorderedLength,this.requestRender(),this._invalidated=!1,this._nextUploadAllowed=!1}return this._displayList}getMesh(e){if(!this._meshes.has(e))throw new Error(`InternalError: Unable to find VAO for instance: ${e}`);return this._meshes.get(e)}getSortKeys(e){const t=new Map;for(const{id:s,sortKey:i}of this._entities)if(e.has(s)&&t.set(s,i),t.size===e.size)break;return t}onMessage(e){if(e.objectIdMap)for(const t in e.objectIdMap)this._objectIdMap||(this._objectIdMap={}),this._objectIdMap[t]=e.objectIdMap[t];switch(e.type){case\"append\":this._onAppendMessage(e);break;case\"update\":this._onUpdateMessage(e)}if(this._aggregateMemoryStats(),this.requestRender(),e.end){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.end [epoch=${e.attributeEpoch}]`),!e.attributeEpoch)throw new Error(\"InternalError: Attribute epoch not defined.\");this._attributeEpoch=e.attributeEpoch,this._encounteredEnd=!0}this._writeLabelVisibilityToMesh()}_onAppendMessage(e){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.append`,{append:m(e?.append)}),e.clear&&this.clear(),!e.append)return;const t=y(new p(e.append.entities),a);this._insert(t,e.append.data,!1)}_onUpdateMessage(e){has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.update`,{isPixelBuffer:e.isPixelBuffer,modify:m(e.modify),remove:e.remove});const t=y(new p(e.modify.entities),a),s=t.map((e=>e.id)),i=e.isPixelBuffer??!1,r=[...e.remove,...s];i?this._removeByIdsFromBuffer(r):this._removeByIds(r),this._insert(t,e.modify.data,i)}reshuffle(e=!1){if(this.destroyed)return;const t=new Map;for(const s of this._entities)for(const i of s.records){const s=this._meshes.get(i.instanceId);let r=t.get(s);r||(r=new f(e),t.set(s,r)),r.copyRecord(i)}for(const[s,i]of t)s.reshuffle(i);this._invalidated=!0,this._aggregateMemoryStats(),has(\"esri-2d-update-debug\")&&b().info(`Tile ${this.key.id} was reshuffled.`)}copyPixelBufferedEntitesFrom(e,t,s,i){const r=s*h,o=i*h;for(const d of e._entities){let s=null;for(const i of d.records)if(i.overlaps&t){const t=e.getMesh(i.instanceId),n=this._ensureMesh(i.instanceId,t.layout,t.useVisibility).copyRecordFrom(t,i,r,o);s||(s=new a(d.id,d.sortKey),this._entityIdsFromBuffer.add(d.id),this._entityIndex.set(s.id,s),this._entities.push(s)),s.records.push(n)}}this._invalidated=!0}get metricsVisibility(){return this._metricsVisibility}copyMetricsVisibility(e){for(const t of e)this._metricsVisibility.add(t);this._writeLabelVisibilityToMesh()}updateLabelVisibility(){this._metricsVisibility.clear();for(const e of this._metrics){e.uniqueSymbol.show&&e.selectedForRendering&&this._metricsVisibility.add(e.hash)}this._writeLabelVisibilityToMesh()}_writeLabelVisibilityToMesh(){const e=this._meshes.get(this._labelInstanceId);if(e&&this._hasMetrics){for(const t of this._metrics){const s=this._entityIndex.get(t.id);if(!s)continue;const i=this._metricsVisibility.has(t.hash);e.setEntityRecordRangeVisibility(s.records,t.recordStart,t.recordCount,i?0:255)}this._invalidated=!0}}_ensureMesh(e,t,s){return this._meshes.has(e)||this._meshes.set(e,new _(this._stage.bufferPool,t,s)),this._meshes.get(e)}_insert(e,t,s){if(!e.length)return;this._removeDuplicatedBufferedEntites(e);const i=this._insertVertexData(t);for(const r of e){for(const e of r.records)e.updateBaseOffsets(i.get(e.instanceId));s?this._tryInsertBufferedEntity(r):this._insertEntity(r)}this._invalidated=!0}_insertMetrics(e){for(const t of e)t.tile=this;this._metrics.push(...e),this._fader?.insertFeatureTileMetrics(this,e)}_insertVertexData(e){const t=new Map;for(const s of e){const{instanceId:e,layout:i}=s,r=i.attributes.some((e=>\"visibility\"===e.name)),o=this._ensureMesh(e,i,r).append(s);if(s.metrics){const e=y(new p(s.metrics),u)??[];this._insertMetrics(e)}t.set(e,o)}return t}_insertEntity(e){has(\"esri-2d-update-debug\")&&this._entityIds.has(e.id)&&console.error(`Tile ${this.key.id} insertEntity: Already have entityId ${e.id}`),this._entityIds.add(e.id),this._entityIndex.set(e.id,e),this._entities.push(e)}_tryInsertBufferedEntity(e){this._entityIds.has(e.id)?this._removeRecordsFromMesh(e.records):(this._entityIdsFromBuffer.add(e.id),this._entityIndex.set(e.id,e),this._entities.push(e))}_removeDuplicatedBufferedEntites(e){if(!this._entityIdsFromBuffer.size)return;const t=[];for(const s of e)this._entityIdsFromBuffer.has(s.id)&&t.push(s.id);this._removeByIds(t)}_removeByIdsFromBuffer(e){this._removeByIds(e.filter((e=>this._entityIdsFromBuffer.has(e))))}_removeByIds(e){if(0===e.length)return;const t=new Set(e),s=[];for(const r of this._entities)t.has(r.id)?(this._remove(r),this._entityIndex.delete(r.id)):s.push(r);this._entities=s;const i=this._metrics.filter((e=>t.has(e.displayId)));this._metrics=this._metrics.filter((e=>!t.has(e.displayId))),this._fader?.removeFeatureTileMetrics(this,i),this._invalidated=!0}_remove(e){this._removeRecordsFromMesh(e.records),this._entityIds.delete(e.id),this._entityIdsFromBuffer.delete(e.id)}_removeRecordsFromMesh(e){for(const t of e){const{instanceId:e,indexStart:s,indexCount:i,vertexStart:r,vertexCount:o}=t;this._meshes.get(e)?.remove(s,i,r,o)}}_aggregateMemoryStats(){this.debugInfo.memory.bytesUsed=0,this.debugInfo.memory.bytesReserved=0;for(const e of this._meshes.values())this.debugInfo.memory.bytesUsed+=e.memoryStats.bytesUsed,this.debugInfo.memory.bytesReserved+=e.memoryStats.bytesReserved}get _needsReshuffle(){if(this.destroyed)return!1;const{bytesUsed:e,bytesReserved:t}=this.debugInfo.memory,s=e/t,{minOrderedLength:i,length:h}=this.debugInfo.display;return t>r&&s<o||h>d&&i/h<n}get entityIds(){return this._objectIdMap?this._entities.map((({id:e})=>({objectId:this._objectIdMap[e],displayId:e}))):[]}}export{I as FeatureTile};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as e}from\"./sources/resolver.js\";const r={shaders:{vertexShader:e(\"tileInfo/tileInfo.vert\"),fragmentShader:e(\"tileInfo/tileInfo.frag\")},attributes:new Map([[\"a_pos\",0]])};export{r as tileInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport{set as t,multiply as s}from\"../../../../core/libs/gl-matrix-2/math/mat2d.js\";import{create as i}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{set as r,multiply as o,identity as e,translate as a,rotate as n,scale as l,invert as m}from\"../../../../core/libs/gl-matrix-2/math/mat3.js\";import{create as c}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{i as h,o as f}from\"../../../../chunks/vec32.js\";import{create as p}from\"../../../../core/libs/gl-matrix-2/factories/vec3f32.js\";import{tileSize as d}from\"./definitions.js\";import{TiledDisplayObject as u}from\"./TiledDisplayObject.js\";const x=c(),M=p();class g extends u{constructor(t,s,i,r){super(t,s,i,r,d,d)}destroy(){super.destroy()}setTransform(m){const c=this.resolution/m.resolution,h=this.transforms.tileMat3,[f,p]=m.toScreenNoRotation([0,0],[this.x,this.y]),d=this.width/this.rangeX*c,u=this.height/this.rangeY*c;r(h,d,0,0,0,u,0,f,p,1),o(this.transforms.displayViewScreenMat3,m.displayViewMat3,h);const x=t(i(),d,0,0,u,f,p);s(this.transforms.labelMat2d,m.viewMat2d,x);const M=[0,0];m.toScreen(M,[this.x,this.y]);const g=this.transforms.tileUnitsToPixels;e(g),a(g,g,M),n(g,g,Math.PI*m.rotation/180),l(g,g,[d,u,1])}_createTransforms(){return{labelMat2d:i(),tileMat3:c(),displayViewScreenMat3:c(),tileUnitsToPixels:c()}}containsScreenPoint(t,s,i){const r=o(x,t.viewMat3,this.transforms.tileMat3),e=m(x,r);if(null==e)return!0;h(M,...s,1);const a=f(M,M,e),n=i*(this.resolution/t.resolution);return a[0]>=-n&&a[0]<this.width+n&&a[1]>=-n&&a[1]<this.height+n}}export{g as AFeatureTile};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport{fromValues as r}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{createProgramDescriptor as e}from\"../Utils.js\";import t from\"./WGLBrush.js\";import{background as s}from\"../shaders/BackgroundPrograms.js\";import{StencilOperation as o,CompareFunction as i,PrimitiveType as a,DataType as n}from\"../../../../webgl/enums.js\";import{createProgram as l}from\"../../../../webgl/ProgramTemplate.js\";const m=()=>e(\"clip\",{geometry:[{location:0,name:\"a_pos\",count:2,type:n.SHORT}]});class p extends t{constructor(){super(...arguments),this._color=r(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:r}){r.setStencilTestEnabled(!0),r.setBlendingEnabled(!1),r.setFaceCullingEnabled(!1),r.setColorMask(!1,!1,!1,!1),r.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),r.setStencilWriteMask(255),r.setStencilFunction(i.ALWAYS,0,255)}draw(r,e){const{context:t,state:o,requestRender:i,allowDelayedRender:p}=r,c=m(),d=e.getVAO(t,o,c.attributes,c.bufferLayouts);null!=d.indexBuffer&&(this._program||(this._program=l(t,s)),!p||null==i||this._program.compiled?(t.useProgram(this._program),this._program.setUniform2fv(\"u_coord_range\",[1,1]),this._program.setUniform4fv(\"u_color\",this._color),this._program.setUniformMatrix3fv(\"u_dvsMat3\",o.displayMat3),t.bindVAO(d),t.drawElements(a.TRIANGLES,d.indexBuffer.size,n.UNSIGNED_INT,0),t.bindVAO()):i())}}export{p as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport r from\"./webgl/brushes/BrushClip.js\";import s from\"./webgl/brushes/WGLBrushStencil.js\";import e from\"./webgl/brushes/WGLBrushTileDebugInfo.js\";import{WGLBrushVTLBackground as l}from\"./webgl/brushes/WGLBrushVTLBackground.js\";import{WGLBrushVTLCircle as o}from\"./webgl/brushes/WGLBrushVTLCircle.js\";import{WGLBrushVTLFill as b}from\"./webgl/brushes/WGLBrushVTLFill.js\";import{WGLBrushVTLLine as i}from\"./webgl/brushes/WGLBrushVTLLine.js\";import{WGLBrushVTLSymbol as u}from\"./webgl/brushes/WGLBrushVTLSymbol.js\";const m={clip:r,stencil:s,tileDebugInfo:e,vtlBackground:l,vtlFill:b,vtlLine:i,vtlCircle:o,vtlSymbol:u};export{m as brushes};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as r}from\"../DefaultVertexAttributeLayouts.js\";import t from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{BufferObject as s}from\"../../../../webgl/BufferObject.js\";import{StencilOperation as o,Face as a,CompareFunction as l,PrimitiveType as n,Usage as d}from\"../../../../webgl/enums.js\";import{createProgram as m}from\"../../../../webgl/ProgramTemplate.js\";import{VertexArrayObject as c}from\"../../../../webgl/VertexArrayObject.js\";class _ extends t{constructor(){super(...arguments),this._color=e(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e}){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),e.setStencilWriteMask(255)}draw(e,r){const{context:t,requestRender:i,allowDelayedRender:s}=e;this._initialized||this._initialize(t),!s||null==i||this._solidProgram.compiled?(t.setStencilFunctionSeparate(a.FRONT_AND_BACK,l.GREATER,r.stencilRef,255),t.bindVAO(this._solidVertexArrayObject),t.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv(\"u_dvsMat3\",r.transforms.displayViewScreenMat3),this._solidProgram.setUniform2fv(\"u_coord_range\",[r.rangeX,r.rangeY]),this._solidProgram.setUniform1f(\"u_depth\",0),this._solidProgram.setUniform4fv(\"u_color\",this._color),t.drawArrays(n.TRIANGLE_STRIP,0,4),t.bindVAO()):i()}_initialize(e){if(this._initialized)return!0;const t=m(e,i);if(!t)return!1;const o=new Int8Array([0,0,1,0,0,1,1,1]),a=s.createVertex(e,d.STATIC_DRAW,o),l=new c(e,i.attributes,r,new Map([[\"geometry\",a]]));return this._solidProgram=t,this._solidVertexArrayObject=l,this._initialized=!0,!0}}export{_ as default};\n"],"names":["r","has","s","create","t","e","acquireUint32Array","constructor","this","_array","_pool","array","length","getUint32View","Uint32Array","buffer","byteOffset","expand","byteLength","set","releaseUint32Array","destroy","a","_data","ArrayBuffer","BYTE_LENGTH","_freeList","start","end","firstFit","BYTES_PER_ELEMENT","free","i","_pages","_pagesByBuffer","Map","_bytesAllocated","_bytesTotal","console","log","concat","_addPage","get","push","o","n","size","strideInt","bufferType","dirty","memoryStats","bytesUsed","bytesReserved","_gpu","_cpu","clear","elementSize","intSize","fillPointer","byteSize","invalidated","bufferSize","invalidatedComputeBuffer","_gpuComputeTriangles","invalidate","_this$_gpu","_invalidateTriangleBuffer","dispose","_this$_gpuComputeTria","_this$_gpu2","_this$_gpuComputeTria2","_this$_cpu","freeList","ensure","maxAvailableSpace","Math","round","setU32","min","max","setF32","setF32Range","fill","getF32","getGPUBuffer","arguments","undefined","Error","_createComputeBuffer","_createBuffer","getView","insert","h","d","u","copyFrom","f","upload","setSubData","reshuffle","srcFrom","dstFrom","mutate","count","DYNAMIC_DRAW","createIndex","createVertex","name","offset","type","FLOAT","l","hash","attributes","stride","_","filter","locations","map","_t$normalized","divisor","normalized","y","_bufferPool","_layout","useVisibility","_invalidatedGeometry","_invalidatedCompute","_position","find","_this$_computeVAO","_this$_geometryVAO","_indexBuffer","_vertexBuffer","_visibilityBuffer","_computeVAO","disposeVAOOnly","_geometryVAO","layout","getDrawArgs","primitive","POINTS","getAttributePrecisionPackFactors","packPrecisionFactor","getDebugVertexInfo","computeAttributeMap","_objectSpread","DataView","slice","vertices","_ensure","append","indices","Float32Array","vertexFrom","indexFrom","setEntityRecordRangeVisibility","vertexStart","vertexCount","getEntityRecordVisibility","records","copyRecordFrom","_a$packPrecisionFacto","_a$packPrecisionFacto2","indexStart","indexCount","v","c","clone","overlaps","remove","getGeometryVAO","_this$_visibilityBuff","_this$_geometryVAO2","getComputeVAO","_this$_computeVAO2","_s$normalized","_s$normalized2","_s$normalized3","vertex","index","operations","shaders","vertexShader","fragmentShader","background","bitBlit","debug","overlay","dot","filtering","heatmap","heatmapResolve","highlight","materials","hittest","icon","heatmapAccumulate","label","line","pie","shared","text","blit","bloom","composite","gaussianBlur","luminosityHighPass","blur","dra","sobel","filterEffect","pp","raster","common","flow","imagery","particles","streamlines","magdir","reproject","scalar","stencil","test","tileInfo","util","split","forEach","resolveIncludes","_ref","coords","lengths","m","_cache","primitiveType","isMapSpace","fromPath","path","floor","geometry","TRIANGLES","fromGeometry","_o$geometry","fromPolygon","fromMapExtent","getLogger","error","fromScreenExtent","xmin","ymin","xmax","ymax","x","toScreen","_ref2","_this$_cache$vertexBu","indexBuffer","vertexBuffers","getIndexBuffer","_this$_cache","_this$_cache$indexBuf","STATIC_DRAW","getVertexBuffers","_this$_cache2","_this$_cache2$vertexB","Object","keys","reduce","Array","super","_clip","stage","_handle","version","_invalidate","ready","fromClipArea","_destroyGL","mesh","vao","getVAO","_lastWidth","_lastHeight","_createMesh","_createTransforms","displayViewScreenMat3","requestRender","clips","_updateClippingInfo","renderChildren","painter","setPipelineState","_renderPasses","prepareRenderPasses","render","registerRenderPass","brushes","clip","target","_clippingInfos","drawPhase","MAP","LABEL","LABEL_ALPHA","DEBUG","HIGHLIGHT","items","b","_color","_this$_outlineProgram","_this$_tileInfoProgra","_this$_outlineVertexA","_this$_tileInfoVertex","_outlineProgram","_tileInfoProgram","_outlineVertexArrayObject","_tileInfoVertexArrayObject","_ctx","prepareState","context","setBlendingEnabled","setBlendFunctionSeparate","ONE","ONE_MINUS_SRC_ALPHA","setColorMask","setStencilWriteMask","setStencilTestEnabled","draw","allowDelayedRender","isReady","hasData","_loadWGLResources","compiled","bindVAO","useProgram","setUniformMatrix3fv","transforms","setUniform2f","rangeX","rangeY","setUniform1f","setUniform4fv","drawArrays","LINE_STRIP","_getTexture","bindTexture","width","height","descriptor","TRIANGLE_STRIP","Int8Array","g","document","createElement","getContext","tileDebugInfoTexture","wrapMode","CLAMP_TO_EDGE","samplingMode","LINEAR","isImmutable","clearRect","canvas","textAlign","textBaseline","font","lineWidth","fillStyle","strokeStyle","debugSlot","key","id","strokeText","fillText","debugInfo","minOrderedLength","minUnorderedLength","triangleCount","display","memory","setData","next","isArray","data","values","last","_head","head","instance","materialKey","textureKey","indexEnd","extend","techniqueRef","getStencilReference","stencilRef","instanceId","getMesh","drawCompute","drawGeometry","drawElements","UNSIGNED_INT","_length","_minOrderedLength","_materialKeys","Set","fromDisplayEntities","getInstance","addRecord","infos","_tail","STRICT_ORDER","_insert","symbologyPlane","STRICT_MARKERS_AND_TEXT","MARKER","TEXT","_g","add","_insertAtHead","_insertAtEnd","_insertAtMiddle","_indexOnly","copyRecord","_pos","_buffer","_i32View","Int32Array","_f32View","readInt32","readF32","entities","vertexData","_o","metrics","I","_fader","_labelInstanceId","_meshes","_entities","_entityIndex","_invalidated","_nextUploadAllowed","tileAge","_metrics","_metricsVisibility","_entityIds","_entityIdsFromBuffer","_attributeEpoch","_encounteredEnd","neededForCoverage","isCoverage","rendering","_decluttered","_objectIdMap","visible","labelMat2d","tileUnitsToPixels","enableDeferredUploads","_this$_fader","removeFeatureTileMetrics","_displayList","beforeRender","_needsReshuffle","reshuffleManager","schedule","tryReady","_uploadAllowed","decluttered","symbols","labelClassId","hasAnimations","needsUpload","_hasMetrics","getDisplayList","sort","sortKey","BATCHING","getSortKeys","onMessage","objectIdMap","_onAppendMessage","_onUpdateMessage","_aggregateMemoryStats","attributeEpoch","_writeLabelVisibilityToMesh","p","_e$isPixelBuffer","isPixelBuffer","modify","_removeByIdsFromBuffer","_removeByIds","destroyed","info","copyPixelBufferedEntitesFrom","_ensureMesh","metricsVisibility","copyMetricsVisibility","updateLabelVisibility","uniqueSymbol","show","selectedForRendering","recordStart","recordCount","_stage","bufferPool","_removeDuplicatedBufferedEntites","_insertVertexData","updateBaseOffsets","_tryInsertBufferedEntity","_insertEntity","_insertMetrics","_this$_fader2","tile","insertFeatureTileMetrics","some","_y","_removeRecordsFromMesh","_this$_fader3","_remove","delete","displayId","_this$_meshes$get","entityIds","objectId","M","setTransform","resolution","tileMat3","toScreenNoRotation","displayViewMat3","viewMat2d","PI","rotation","containsScreenPoint","viewMat3","_program","setFaceCullingEnabled","setStencilOp","KEEP","REPLACE","setStencilFunction","ALWAYS","state","location","SHORT","bufferLayouts","setUniform2fv","displayMat3","tileDebugInfo","vtlBackground","vtlFill","vtlLine","vtlCircle","vtlSymbol","_initialized","_solidProgram","_solidVertexArrayObject","setDepthWriteEnabled","setDepthTestEnabled","_initialize","setStencilFunctionSeparate","FRONT_AND_BACK","GREATER"],"sourceRoot":""}